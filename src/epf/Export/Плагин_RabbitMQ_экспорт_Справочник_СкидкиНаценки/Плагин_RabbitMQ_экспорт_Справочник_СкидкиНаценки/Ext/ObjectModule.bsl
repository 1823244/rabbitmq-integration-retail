#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Справочник_СкидкиНаценки");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Справочник_СкидкиНаценки");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Справочник_СкидкиНаценки",
		"Форма_Плагин_RabbitMQ_экспорт_Справочник_СкидкиНаценки",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	

 
Функция ВыгрузитьОбъект(ДанныеСсылка) Экспорт
	Если ТипЗнч(ДанныеСсылка) = Тип("СправочникСсылка.СкидкиНаценки") Тогда
		Обк = ДанныеСсылка.ПолучитьОбъект(); 
	Иначе 
		Обк = ДанныеСсылка; 
	КонецЕсли;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "ERP");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	//	DEFINITION          
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	definition.Вставить("БонуснаяПрограммаЛояльности", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.БонуснаяПрограммаЛояльности));
	definition.Вставить("ВалютаПредоставления", Обк.ВалютаПредоставления);
	definition.Вставить("ВариантСовместногоПрименения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВариантСовместногоПрименения));
	definition.Вставить("ВидЦены", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВидЦены));
	definition.Вставить("ВнешняяОбработка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВнешняяОбработка));
	definition.Вставить("ЗначениеСкидкиНаценки", Обк.ЗначениеСкидкиНаценки);
	definition.Вставить("КоличествоПериодовДействия", Обк.КоличествоПериодовДействия);
	definition.Вставить("КоличествоПериодовОтсрочкиНачалаДействия", Обк.КоличествоПериодовОтсрочкиНачалаДействия);
	definition.Вставить("КоличествоПодарковИзКорзиныПокупателя", Обк.КоличествоПодарковИзКорзиныПокупателя);
	definition.Вставить("КратноКоличествуУсловий", Обк.КратноКоличествуУсловий);
	definition.Вставить("МоментВыдачиСообщения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.МоментВыдачиСообщения));
	definition.Вставить("ОбластьПредоставления", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ОбластьПредоставления));
	
	// там может быть NULL
	Если НЕ ЗначениеЗаполнено(Обк.ОграничениеРазмераПодчиненныхСкидок) Тогда
		definition.Вставить("ОграничениеРазмераПодчиненныхСкидок", Неопределено);
	Иначе 
		definition.Вставить("ОграничениеРазмераПодчиненныхСкидок", Обк.ОграничениеРазмераПодчиненныхСкидок);
	КонецЕсли;
	
	
	definition.Вставить("ПериодДействия", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПериодДействия));
	definition.Вставить("ПериодОтсрочкиНачалаДействия", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПериодОтсрочкиНачалаДействия));
	definition.Вставить("ПодарокИзКорзиныПокупателя", Обк.ПодарокИзКорзиныПокупателя);
	definition.Вставить("ПодарокИзСписка", Обк.ПодарокИзСписка);
	definition.Вставить("РеквизитДопУпорядочивания", Обк.РеквизитДопУпорядочивания);
	definition.Вставить("СегментНоменклатурыПредоставления", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СегментНоменклатурыПредоставления));
	definition.Вставить("СпособПредоставления", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СпособПредоставления));
	definition.Вставить("СтатусДействия", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СтатусДействия));
	definition.Вставить("ТекстСообщения", Обк.ТекстСообщения);
	definition.Вставить("Управляемая", Обк.Управляемая);
	definition.Вставить("УчитыватьПодарокКакПродажу", Обк.УчитыватьПодарокКакПродажу);

	//------------------------------------------------------     ТЧ УсловияПредоставления

	ТЧУсловияПредоставления = Новый Массив;

	Для сч = 0 По обк.УсловияПредоставления.Количество()-1 Цикл

		стрк = обк.УсловияПредоставления[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("УсловиеПредоставления", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.УсловиеПредоставления));
		ТЧУсловияПредоставления.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧУсловияПредоставления", ТЧУсловияПредоставления);

	//------------------------------------------------------     ТЧ ЦеновыеГруппы

	ТЧЦеновыеГруппы = Новый Массив;

	Для сч = 0 По обк.ЦеновыеГруппы.Количество()-1 Цикл

		стрк = обк.ЦеновыеГруппы[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("ЗначениеСкидкиНаценки", стрк.ЗначениеСкидкиНаценки);
		НовСтр.Вставить("ЦеноваяГруппа", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ЦеноваяГруппа));
		ТЧЦеновыеГруппы.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧЦеновыеГруппы", ТЧЦеновыеГруппы);

	//------------------------------------------------------     ТЧ НаборПодарков

	ТЧНаборПодарков = Новый Массив;

	Для сч = 0 По обк.НаборПодарков.Количество()-1 Цикл

		стрк = обк.НаборПодарков[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("Количество", стрк.Количество);
		НовСтр.Вставить("КоличествоУпаковок", стрк.КоличествоУпаковок);
		НовСтр.Вставить("Номенклатура", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Номенклатура));
		НовСтр.Вставить("Упаковка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Упаковка));
		НовСтр.Вставить("Характеристика", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Характеристика));
		ТЧНаборПодарков.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧНаборПодарков", ТЧНаборПодарков);




	//------------------------------------------------------ ФИНАЛ


	СтруктураОбъекта.Вставить("definition", definition);
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	Возврат json;
КонецФункции






