Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_УстановкаЦенНоменклатуры");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_УстановкаЦенНоменклатуры");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_УстановкаЦенНоменклатуры",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_УстановкаЦенНоменклатуры",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// ///////////   ИМПОРТ  В ОБЪЕКТ ////////////


Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.установкаценноменклатуры") Тогда
		Возврат Неопределено;
	КонецЕсли;
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	//------------------------------------- работа с GUID
	
	СуществующийОбъект = Документы.УстановкаЦенНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		СуществующийОбъект = Неопределено;
	Иначе 
		
		ОбъектДанных = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		СсылкаНового = Документы.УстановкаЦенНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



//	гуид="";
//	ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ДокументОснование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументОснование.Ref ) );
//	Иначе
//		ОбъектДанных.ДокументОснование = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);

	ОбъектДанных.Комментарий = деф.Комментарий;

//	гуид="";
//	ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
//	Иначе
//		ОбъектДанных.Ответственный = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Ответственный = Пользователи.ТекущийПользователь();

	ОбъектДанных.Согласован = деф.Согласован;




//	//------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();

	ТЗВидыЦен = Новый ТаблицаЗначений;
	ТЗВидыЦен.Колонки.Добавить("ВидЦены");
	
	Для счТовары = 0 По деф.ТЧТовары25.Количество()-1 Цикл
		стрк = деф.ТЧТовары25[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.ВидЦены.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ВидЦены = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЦены.Ref ) );
//		Иначе
//			СтрокаТЧ.ВидЦены = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
		СтрокаТЧ.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦен(стрк.ВидЦены, мВнешняяСистема); 
		
		НовСтрВидыЦен=ТЗВидыЦен.Добавить();
		НовСтрВидыЦен.ВидЦены = СтрокаТЧ.ВидЦены;

//		гуид="";
//		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
//		Иначе
//			СтрокаТЧ.Номенклатура = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);

//		гуид="";
//		ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
//		Иначе
//			СтрокаТЧ.Упаковка = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(Стрк.Упаковка, стрк.Номенклатура);

//		гуид="";
//		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
//		Иначе
//			СтрокаТЧ.Характеристика = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);

		СтрокаТЧ.Цена = стрк.Цена;

		СтрокаТЧ.ЦенаИзмененаВручную = стрк.ЦенаИзмененаВручную;

	КонецЦикла;
	
	ТЗВидыЦен.Свернуть("ВидЦены");
	
//	//------------------------------------------------------     ТЧ ВидыЦен



	ОбъектДанных.ВидыЦен.Очистить();

	
	Для счТовары = 0 По деф.ТЧВидыЦен.Количество()-1 Цикл
		стрк = деф.ТЧВидыЦен[счТовары];

		Если стрк.Свойство("ВидЦены") Тогда
			СтрокаТЧ = ОбъектДанных.ВидыЦен.Добавить();
			ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦен(стрк.ВидЦены, мВнешняяСистема);  
			Если ЗначениеЗаполнено(ВидЦены) Тогда
				СтрокаТЧ.ВидЦены = ВидЦены;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
// если в сообщении будет пустая таблица с ценами:
		//"ТЧВидыЦен": [
		//    {}
		//],
// возьмем их  из ТЧ Товары (мы собрали ТЗВидыЦен при загрузке товаров)
	
	Если ОбъектДанных.ВидыЦен.Количество() = 0 Тогда
		
		Для каждого стркЦены Из ТЗВидыЦен Цикл
			Если ЗначениеЗаполнено(стркЦены.ВидЦены) Тогда
				СтрокаТЧ = ОбъектДанных.ВидыЦен.Добавить();
				СтрокаТЧ.ВидЦены = стркЦены.ВидЦены;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;

//	//------------------------------------------------------     ТЧ НаборыЗначенийДоступа



//	ОбъектДанных.НаборыЗначенийДоступа.Очистить();


//	Для счТовары = 0 По деф.ТЧНаборыЗначенийДоступа.Количество()-1 Цикл
//		стрк = деф.ТЧНаборыЗначенийДоступа[счТовары];
//		СтрокаТЧ = ОбъектДанных.НаборыЗначенийДоступа.Добавить();


//		_знч = "";
//		ЕстьЗначение = стрк.ЗначениеДоступа.свойство("Значение",_знч);
//		Если ЕстьЗначение Тогда
//			СтрокаТЧ.ЗначениеДоступа = стрк.ЗначениеДоступа.Значение;
//		Иначе
//			СтрокаТЧ.ЗначениеДоступа = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ЗначениеДоступа = ксп_ИмпортСлужебный.НайтиПеречисление_ЗначениеДоступа(стрк.ЗначениеДоступа);

//		СтрокаТЧ.Изменение = стрк.Изменение;

//		СтрокаТЧ.НомерНабора = стрк.НомерНабора;

//		гуид="";
//		ЕстьАтрибут = стрк.Уточнение.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Уточнение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Уточнение.Ref ) );
//		Иначе
//			СтрокаТЧ.Уточнение = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Уточнение = ксп_ИмпортСлужебный.НайтиУточнение(стрк.Уточнение);

//		СтрокаТЧ.Чтение = стрк.Чтение;

//	КонецЦикла;




	//------------------------------------------------------ ФИНАЛ


	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();


	// сохранить исходный json
	//РегистрыСведений.ксп_ИсходныеДанныеСообщений.ДобавитьЗапись(ОбъектДанных.Ссылка, jsonText);


	Возврат ОбъектДанных.Ссылка;
	
КонецФункции






#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	//Если Свойство = "Сумма" Тогда
	//	Возврат XMLЗначение(Тип("Число"),Значение);
	//КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Значение;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПроверитьКачествоДанных(ДокументОбъект)
	
	// проверить шапку
	
	Для каждого рек Из МассивРеквизитовШапкиДляПроверки() Цикл
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект[рек]) Тогда
			
			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.НетЗначения);
				
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект[рек]) 
			И НЕ ЗначениеЗаполнено(ДокументОбъект[рек].ВерсияДанных) Тогда

			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.БитаяСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// проверить все Табл Части
	
		
	Возврат Неопределено;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки()
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("МагазинОтправитель");
	//мРеквизиты.Добавить("МагазинПолучатель");
	//мРеквизиты.Добавить("Организация");
	//мРеквизиты.Добавить("ОрганизацияПолучатель");
	//мРеквизиты.Добавить("Ответственный");
	Возврат мРеквизиты;
	
КонецФункции


мВнешняяСистема = "erp";

