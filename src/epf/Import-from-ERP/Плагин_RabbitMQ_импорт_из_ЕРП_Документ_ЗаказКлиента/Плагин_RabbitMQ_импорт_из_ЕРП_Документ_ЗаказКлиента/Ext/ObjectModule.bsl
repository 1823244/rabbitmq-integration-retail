Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказКлиента");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказКлиента");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказКлиента",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказКлиента",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//	jsonText 			- строка - оригинальное сообщение из брокера
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = "документ.заказклиента" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	СуществующийОбъект = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		
	Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = Документы.ЗаказПокупателя.СоздатьДокумент();
		СсылкаНового = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	Иначе 
		// а вот здесь вопрос - надо обновлять документ или нет?
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
		
	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	СкладГУИД = "";
	Если деф.Склад.Свойство("Ref", СкладГУИД) Тогда
		//ОбъектДанных.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СкладГУИД));
		ОбъектДанных.Склад = РегистрыСведений.ксп_МэппингСправочникСклады.ПоМэппингу(СкладГУИД, мВнешняяСистема);
		// попробуем по ГУИД
		Если НЕ ЗначениеЗаполнено(ОбъектДанных.Склад) ИЛИ НЕ ЗначениеЗаполнено(ОбъектДанных.Склад.ВерсияДанных) Тогда
			ОбъектДанных.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СкладГУИД));
		КонецЕсли;
	КонецЕсли; 
	
	//ОрганизацияГУИД = "";
	//Если деф.Организация.Свойство("Ref", ОрганизацияГУИД) Тогда
	//	ОбъектДанных.Организация = РегистрыСведений.ксп_МэппингСправочникОрганизации.ПоМэппингу(ОрганизацияГУИД);
	//	Если НЕ ЗначениеЗаполнено(ОбъектДанных.Организация) ИЛИ НЕ ЗначениеЗаполнено(ОбъектДанных.Организация.ВерсияДанных) Тогда
	//		ОбъектДанных.Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(ОрганизацияГУИД));
	//	КонецЕсли;
	//КонецЕсли;
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	
	//Реквизит	Тип	Вид
	ОбъектДанных.АдресДоставки = деф.АдресДоставки;
	ОбъектДанных.АдресДоставкиЗначение = деф.АдресДоставкиЗначение;
	
	Если деф.БанковскийСчет.Свойство("НомерСчета") И деф.БанковскийСчет.Свойство("БИК") Тогда
		ОбъектДанных.БанковскийСчетОрганизации = ксп_ИмпортСлужебный.НайтиБанковскийСчет(деф.БанковскийСчет.НомерСчета, деф.БанковскийСчет.БИК);
		Если НЕ ЗначениеЗаполнено(ОбъектДанных.БанковскийСчетОрганизации) Тогда
			БанкСчетГУИД = "";
			деф.БанковскийСчет.Свойство("Ref", БанкСчетГУИД);
			ОбъектДанных.БанковскийСчетОрганизации = Справочники.БанковскиеСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(БанкСчетГУИД));
		КонецЕсли;
	КонецЕсли;
	
	Штрихкод = "";
	МагнитныйКод = "";
	Если деф.КартаЛояльности.Свойство("Штрихкод", Штрихкод) ИЛИ деф.КартаЛояльности.Свойство("МагнитныйКод", МагнитныйКод) Тогда
		ОбъектДанных.ДисконтнаяКарта = ксп_ИмпортСлужебный.НайтиДисконтнуюКарту(Штрихкод, МагнитныйКод);
		Если НЕ ЗначениеЗаполнено(ОбъектДанных.ДисконтнаяКарта) Тогда
			ДисконтнаяКартаГУИД = "";
			деф.КартаЛояльности.Свойство("Ref", ДисконтнаяКартаГУИД);
			ОбъектДанных.ДисконтнаяКарта = Справочники.ИнформационныеКарты.ПолучитьСсылку(Новый УникальныйИдентификатор(ДисконтнаяКартаГУИД));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДанных.ДисконтнаяКарта) Тогда
		ОбъектДанных.ВладелецДисконтнойКарты = ОбъектДанных.ДисконтнаяКарта.ВладелецКарты;
	КонецЕсли;
	
	ОбъектДанных.ДатаЗаказаНаСайте = деф.ДатаПоДаннымКлиента;
	ОбъектДанных.ЖелаемаяДатаПродажи = деф.ДатаОтгрузки;
	Если НЕ ЗначениеЗаполнено(ОбъектДанных.ЖелаемаяДатаПродажи) Тогда
		ОбъектДанных.ЖелаемаяДатаПродажи = ОбъектДанных.Дата;
	КонецЕсли;
	
	ОбъектДанных.ИнтернетЗаказ = ЗначениеЗаполнено(СокрЛП(деф.НомерПоДаннымКлиента));
	
	//ОбъектДанных.КассаККМ = деф.____;
	
	ОбъектДанных.Комментарий = деф.Комментарий;
	
	//КонтрагентГУИД = "";
	//Если деф.Контрагент.Свойство("Ref", КонтрагентГУИД) Тогда
	//	ОбъектДанных.Контрагент = РегистрыСведений.ксп_МэппингСправочникКонтрагенты.ПоМэппингу(КонтрагентГУИД);
	//	Если НЕ ЗначениеЗаполнено(ОбъектДанных.Контрагент) ИЛИ НЕ ЗначениеЗаполнено(ОбъектДанных.Контрагент.ВерсияДанных) Тогда
	//		ОбъектДанных.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(КонтрагентГУИД));
	//	КонецЕсли;
	//КонецЕсли;
	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);

	//ОбъектДанных.КонтрагентТелефон = деф.____;
	//ОбъектДанных.КонтрагентТелефонЗначение = деф.____;
	
	ОбъектДанных.Магазин = РегистрыСведений.ксп_МэппингСкладМагазин.ПоМэппингу(ОбъектДанных.Склад, мВнешняяСистема);
	
	ОбъектДанных.МаксимальныйКодСтроки = деф.МаксимальныйКодСтроки;
	
	//ОбъектДанных.НаличиеНезарезервированныхСтрок = деф.____;
	
	ОбъектДанных.НомерЗаказаНаСайте = деф.НомерПоДаннымКлиента;
	
	ПользовательГУИД = ""; 
	Если деф.Автор.Свойство("Ref", ПользовательГУИД) Тогда
		ОбъектДанных.Ответственный = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ПользовательГУИД));
	КонецЕсли;
	
	
	//ОбъектДанных.Отменено = деф.____;
	
	//ОбъектДанных.Продавец = деф.____;
	
	ОбъектДанных.СкидкиРассчитаны = деф.СкидкиРассчитаны;
	
	ОбъектДанных.Статус = СтатусЗаказа(деф.Статус);
	
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	
	//ОбъектДанных.УдалитьБанковскийСчетОрганизации = деф.____;
	
	ОбъектДанных.УчитыватьНДС = ксп_ИмпортСлужебный.УчитыватьНДС(деф.НалогообложениеНДС);
	
	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;	
	
	
	//---------------------------------------------ТЧ ТОВАРЫ
	
	ОбъектДанных.Товары.Очистить();

	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		НовСтр = ОбъектДанных.Товары.Добавить();
		
		НовСтр.Резервировать = РезервироватьИлиНет(стрк.ВариантОбеспечения);
		
		Если стрк.Отменено Тогда
			НовСтр.Резервировать = Ложь;
		КонецЕсли;
		
		НовСтр.КлючСвязи = стрк.КлючСвязи;
		НовСтр.КодСтроки = стрк.КодСтроки;
		НовСтр.Количество = стрк.Количество;
		НовСтр.КоличествоУпаковок = стрк.КоличествоУпаковок;
		
		НовСтр.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		
		НовСтр.Отменено = стрк.Отменено;	
		
		НовСтр.ПричинаОтмены = РегистрыСведений.ксп_МэппингПричинаОтменыЗаказаКлиента.ПоМэппингу(стрк.ПричинаОтмены, мВнешняяСистема);
		
		НовСтр.ПроцентАвтоматическойСкидки = стрк.ПроцентАвтоматическойСкидки;
		НовСтр.ПроцентРучнойСкидки = стрк.ПроцентРучнойСкидки;
		
		
		НовСтр.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоСправочникуЕРП(стрк.СтавкаНДС);
		
		НовСтр.СуммаНДС = стрк.СуммаНДС;
		НовСтр.СуммаАвтоматическойСкидки = стрк.СуммаАвтоматическойСкидки;	
		НовСтр.СуммаРучнойСкидки = стрк.СуммаРучнойСкидки;
		НовСтр.Сумма = стрк.СуммаСНДС;
		
		НовСтр.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
	
		НовСтр.Цена = стрк.Цена;
		
		
		Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);
		//упаковка может быть не указана в строке ТЧ, тогда используем единицу хранения номенклатуры
		Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
			Упаковка = НовСтр.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		НовСтр.Упаковка = Упаковка;
				
	КонецЦикла;
	
	
		
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	
	
	Возврат ОбъектДанных.Ссылка;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	ВариантОбеспечения 	- строка - узел перечисления
//
// Возвращаемое значение:
//	Тип: Булево
//
Функция РезервироватьИлиНет(ВариантОбеспечения)
		
	Если 	НРег(ВариантОбеспечения.Значение) = НРег("СоСклада") 
		ИЛИ НРег(ВариантОбеспечения.Значение) = НРег("Отгрузить") Тогда
		
		Возврат Истина;
		
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СтатусЗаказа(УзелСтатус)

	Если УзелСтатус.Значение = "КОбеспечению" Тогда
		Возврат Перечисления.СтатусыЗаказовПокупателей.Согласован;
	ИначеЕсли УзелСтатус.Значение = "НеСогласован" Тогда
		Возврат Перечисления.СтатусыЗаказовПокупателей.НеСогласован;
	ИначеЕсли УзелСтатус.Значение = "КОтгрузке" Тогда
		Возврат Перечисления.СтатусыЗаказовПокупателей.Согласован;
	ИначеЕсли УзелСтатус.Значение = "Закрыт" Тогда
		Возврат Перечисления.СтатусыЗаказовПокупателей.Закрыт;
	КонецЕсли;

	Возврат Перечисления.СтатусыЗаказовПокупателей.НеСогласован;
	
КонецФункции




#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Склад");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

мВнешняяСистема = "erp";

