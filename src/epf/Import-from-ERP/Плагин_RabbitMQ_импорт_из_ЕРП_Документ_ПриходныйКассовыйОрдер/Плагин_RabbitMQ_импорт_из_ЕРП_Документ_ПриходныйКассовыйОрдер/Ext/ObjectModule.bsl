Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПриходныйКассовыйОрдер");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПриходныйКассовыйОрдер");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПриходныйКассовыйОрдер",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ПриходныйКассовыйОрдер",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// ///////////   ИМПОРТ  В ОБЪЕКТ ////////////


Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.приходныйкассовыйордер") Тогда
		Возврат Неопределено;
	КонецЕсли;
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	//------------------------------------- работа с GUID
	
	СуществующийОбъект = Документы.ПриходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		СуществующийОбъект = Неопределено;
	Иначе 
		
		ОбъектДанных = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		СсылкаНового = Документы.ПриходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



//	ОбъектДанных.АдресЭП = деф.АдресЭП;

	НомерСчета="";
	ЕстьАтрибут = деф.БанковскийСчет.свойство("НомерСчета",НомерСчета);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.БанковскийСчет = ксп_ИмпортСлужебный.НайтиБанковскийСчет(НомерСчета, деф.БанковскийСчет.БИК);
	Иначе
		ОбъектДанных.БанковскийСчет = Неопределено;
	КонецЕсли;

//	ОбъектДанных.ВТомЧислеНДС = деф.ВТомЧислеНДС;

	// доделать
	гуид="";
	ЕстьАтрибут = деф.Договор.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(деф.Договор.Ref);
	Иначе
		ОбъектДанных.ДоговорКонтрагента = Неопределено;
	КонецЕсли;

//	гуид="";
//	ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ДокументОснование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументОснование.Ref ) );
//	Иначе
//		ОбъектДанных.ДокументОснование = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);

//	гуид="";
//	ЕстьАтрибут = деф.ЗаказПокупателя.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ЗаказПокупателя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗаказПокупателя.Ref ) );
//	Иначе
//		ОбъектДанных.ЗаказПокупателя = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ЗаказПокупателя = ксп_ИмпортСлужебный.НайтиЗаказПокупателя(деф.ЗаказПокупателя);

//	гуид="";
//	ЕстьАтрибут = деф.Касса.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.Касса = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Касса.Ref ) );
//	Иначе
//		ОбъектДанных.Касса = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Касса = ксп_ИмпортСлужебный.НайтиКассу(деф.Касса, мВнешняяСистема);

//	гуид="";
//	ЕстьАтрибут = деф.КассаККМ.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.КассаККМ = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КассаККМ.Ref ) );
//	Иначе
//		ОбъектДанных.КассаККМ = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
	ОбъектДанных.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ);

	ОбъектДанных.Комментарий = деф.Комментарий;

//	гуид="";
//	ЕстьАтрибут = деф.Контрагент.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.Контрагент = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Контрагент.Ref ) );
//	Иначе
//		ОбъектДанных.Контрагент = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);

//	ОбъектДанных.НомерЧекаККМ = деф.НомерЧекаККМ;

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

//	ОбъектДанных.Основание = деф.Основание;

//	гуид="";
//	ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
//	Иначе
//		ОбъектДанных.Ответственный = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Ответственный = пользователи.ТекущийПользователь();

//	гуид="";
//	ЕстьАтрибут = деф.ОтчетОРозничныхПродажах.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ОтчетОРозничныхПродажах = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ОтчетОРозничныхПродажах.Ref ) );
//	Иначе
//		ОбъектДанных.ОтчетОРозничныхПродажах = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ОтчетОРозничныхПродажах = ксп_ИмпортСлужебный.НайтиОтчетОРозничныхПродажах(деф.ОтчетОРозничныхПродажах);

	ОбъектДанных.Приложение = деф.Приложение;

	ОбъектДанных.ПринятоОт = деф.ПринятоОт;

//	ОбъектДанных.ПробиватьЧекиПоКассеККМ = деф.ПробиватьЧекиПоКассеККМ;

//	ОбъектДанных.ПробитЧек = деф.ПробитЧек;

//	_знч = "";
//	ЕстьЗначение = деф.СистемаНалогообложения.свойство("Значение",_знч);
//	Если ЕстьЗначение Тогда
//		ОбъектДанных.СистемаНалогообложения = деф.СистемаНалогообложения.Значение;
//	Иначе
//		ОбъектДанных.СистемаНалогообложения = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.СистемаНалогообложения = ксп_ИмпортСлужебный.НайтиПеречисление_СистемаНалогообложения(деф.СистемаНалогообложения);

//	ОбъектДанных.СменаЗакрыта = деф.СменаЗакрыта;

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;

//	ОбъектДанных.Телефон = деф.Телефон;

// доделать - конвертация перечисления (в ЕРП есть такое же)
//	_знч = "";
//	ЕстьЗначение = деф.ХозяйственнаяОперация.свойство("Значение",_знч);
//	Если ЕстьЗначение Тогда
//		ОбъектДанных.ХозяйственнаяОперация = деф.ХозяйственнаяОперация.Значение;
//	Иначе
//		ОбъектДанных.ХозяйственнаяОперация = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;




//	//------------------------------------------------------     ТЧ РасшифровкаПлатежа



	ОбъектДанных.РасшифровкаПлатежа.Очистить();


	Для счТовары = 0 По деф.ТЧРасшифровкаПлатежа.Количество()-1 Цикл
		стрк = деф.ТЧРасшифровкаПлатежа[счТовары];
		СтрокаТЧ = ОбъектДанных.РасшифровкаПлатежа.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.ДокументРасчетовСКонтрагентом.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ДокументРасчетовСКонтрагентом = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ДокументРасчетовСКонтрагентом.Ref ) );
//		Иначе
//			СтрокаТЧ.ДокументРасчетовСКонтрагентом = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ДокументРасчетовСКонтрагентом = ксп_ИмпортСлужебный.НайтиДокументРасчетовСКонтрагентом(стрк.ДокументРасчетовСКонтрагентом);

//		_знч = "";
//		ЕстьЗначение = стрк.ПризнакСпособаРасчета.свойство("Значение",_знч);
//		Если ЕстьЗначение Тогда
//			СтрокаТЧ.ПризнакСпособаРасчета = стрк.ПризнакСпособаРасчета.Значение;
//		Иначе
//			СтрокаТЧ.ПризнакСпособаРасчета = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ПризнакСпособаРасчета = ксп_ИмпортСлужебный.НайтиПеречисление_ПризнакСпособаРасчета(стрк.ПризнакСпособаРасчета);

		СтрокаТЧ.СтатьяДвиженияДенежныхСредств = ксп_ИмпортСлужебный.НайтиСтатьюДДС(стрк.СтатьяДвиженияДенежныхСредств, мВнешняяСистема);

		СтрокаТЧ.Сумма = стрк.Сумма;

	КонецЦикла;




	//------------------------------------------------------ ФИНАЛ


	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();


	// сохранить исходный json
	//РегистрыСведений.ксп_ИсходныеДанныеСообщений.ДобавитьЗапись(ОбъектДанных.Ссылка, jsonText);


	Возврат ОбъектДанных.Ссылка;
	
КонецФункции




#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	//Если Свойство = "Сумма" Тогда
	//	Возврат XMLЗначение(Тип("Число"),Значение);
	//КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Значение;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПроверитьКачествоДанных(ДокументОбъект)
	
	// проверить шапку
	
	Для каждого рек Из МассивРеквизитовШапкиДляПроверки() Цикл
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект[рек]) Тогда
			
			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.НетЗначения);
				
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект[рек]) 
			И НЕ ЗначениеЗаполнено(ДокументОбъект[рек].ВерсияДанных) Тогда

			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.БитаяСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// проверить все Табл Части
	
		
	Возврат Неопределено;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки()
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("МагазинОтправитель");
	//мРеквизиты.Добавить("МагазинПолучатель");
	//мРеквизиты.Добавить("Организация");
	//мРеквизиты.Добавить("ОрганизацияПолучатель");
	//мРеквизиты.Добавить("Ответственный");
	Возврат мРеквизиты;
	
КонецФункции


мВнешняяСистема = "erp";

