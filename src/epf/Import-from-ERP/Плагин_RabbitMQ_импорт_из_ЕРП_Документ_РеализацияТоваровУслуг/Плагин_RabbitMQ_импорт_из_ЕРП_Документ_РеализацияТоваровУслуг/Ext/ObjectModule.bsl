Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	ЗагрузитьОбъект_ВДокумент(СтруктураОбъекта, jsonText);
	
	//ЗагрузитьОбъект_ВРегистр(СтруктураОбъекта, jsonText);

	//Возврат ОбъектДанных.Ссылка;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект_ВДокумент(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.реализациятоваровуслуг") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	id 	= СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	СуществующийОбъект = Документы.РеализацияТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		
	Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = Документы.РеализацияТоваров.СоздатьДокумент();
		СсылкаНового = Документы.РеализацияТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	Иначе 
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
	КонецЕсли;
		
	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.Комментарий 		= деф.Комментарий;	
	ОбъектДанных.Магазин 			= РегистрыСведений.ксп_МэппингСкладМагазин.ПоМэппингу(деф.Склад, мВнешняяСистема);
	ОбъектДанных.Организация 		= ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Ответственный 		= ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию();                                                        
	ОбъектДанных.Склад 				= ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);
	ОбъектДанных.АдресДоставки 		= деф.АдресДоставки;
	Если деф.БанковскийСчетОрганизации.Свойство("НомерСчета") Тогда
		ОбъектДанных.БанковскийСчетОрганизации	= ксп_ИмпортСлужебный.НайтиБанковскийСчет(
			деф.БанковскийСчетОрганизации.НомерСчета, деф.БанковскийСчетОрганизации.БИК);
	КонецЕсли;
	ОбъектДанных.БонусыНачислены	= Ложь;
	ОбъектДанных.ДанныеТранспортногоРаздела	= Неопределено;
	Если деф.КартаЛояльности.Свойство("Штрихкод") Тогда
		ОбъектДанных.ДисконтнаяКарта	=	ксп_ИмпортСлужебный.НайтиДисконтнуюКарту(деф.КартаЛояльности.Штрихкод, деф.КартаЛояльности.МагнитныйКод) ;
		ОбъектДанных.ВладелецДисконтнойКарты	= ОбъектДанных.ДисконтнаяКарта.ВладелецКарты;
	КонецЕсли;
	ОбъектДанных.ДоверенностьВыдана		= деф.ДоверенностьВыдана;
	ОбъектДанных.ДоверенностьДата		= деф.ДоверенностьДата;	
	ОбъектДанных.ДоверенностьНомер		= деф.ДоверенностьНомер;
	ОбъектДанных.ДоверенностьЧерезКого	= деф.ДоверенностьЛицо;	
	ОбъектДанных.Контрагент	= ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	ОбъектДанных.ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговор(деф.Договор, мВнешняяСистема, деф.Контрагент, ОбъектДанных.Контрагент);
	//todo Возможно стоит добавить получение договора, если есть только один (1) вида "С Покупателем"
	ОбъектДанных.ДокументРасчета	 = Неопределено;
	ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ	= деф.ЕстьМаркируемаяПродукцияГИСМ;
	ОбъектДанных.ЗаказПокупателя	= ксп_ИмпортСлужебный.НайтиЗаказПокупателяПоГУИД(деф.ЗаказКлиента, мВнешняяСистема);
	ОбъектДанных.Продавец	= Неопределено;
	ОбъектДанных.СистемаНалогообложения = ксп_ИмпортСлужебный.СистемаНалогообложения(ОбъектДанных.Организация, 
		ОбъектДанных.Магазин, ОбъектДанных.Склад);
	ОбъектДанных.СкидкиРассчитаны	= деф.СкидкиРассчитаны	;
	ОбъектДанных.СуммаДокумента	= деф.СуммаДокумента;
	ОбъектДанных.ЦенаВключаетНДС	= деф.ЦенаВключаетНДС;		
	
	            	
	
	
	
	ОбъектДанных.Товары.Очистить();

	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		НовСтр = ОбъектДанных.Товары.Добавить();

		НовСтр.ДоговорКонтрагента	= ОбъектДанных.ДоговорКонтрагента;
		//НовСтр.ЗаказПокупателя	= стрк.ЗаказКлиента
		НовСтр.КлючСвязи	=стрк.КлючСвязи;
		//КлючСвязиСерийныхНомеров	Число	
		НовСтр.КлючСвязиСерийныхНомеров	= Неопределено;	
		//КлючСвязиУслугаАгента	Число	
		//КодСтроки	Число	
		//Количество	Число	
		НовСтр.Количество 			= стрк.Количество;
		//КоличествоУпаковок	Число	   
		НовСтр.КоличествоУпаковок 	= стрк.КоличествоУпаковок;
		
		//НеобходимостьВводаАкцизнойМарки	Булево	
		//Номенклатура	Справочник	Номенклатура
		НовСтр.Номенклатура 		= ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		//Продавец	Справочник	ФизическиеЛица
		НовСтр.ПроцентАвтоматическойСкидки	=стрк.ПроцентАвтоматическойСкидки;	
		НовСтр.ПроцентРучнойСкидки	=стрк.ПроцентРучнойСкидки;	
		//Резервировать	Булево	
		новСтр.СтавкаНДС	= ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоСправочникуЕРП(стрк.СтавкаНДС); 
		СтатусУказанияСерий	= стрк.СтатусУказанияСерий;	
		//Сумма	Число	
		Если ОбъектДанных.ЦенаВключаетНДС Тогда
			НовСтр.Сумма	= стрк.СуммаСНДС;
		Иначе 
			НовСтр.Сумма	= стрк.Сумма;
		КонецЕсли;
		новСтр.СуммаАвтоматическойСкидки	=стрк.СуммаАвтоматическойСкидки;	

		НовСтр.СуммаНДС	= стрк.СуммаНДС;
		
		новСтр.СуммаРучнойСкидки	=стрк.СуммаРучнойСкидки;	
		//Упаковка	Справочник	УпаковкиНоменклатуры
		НовСтр.Упаковка 			= ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);
		//Характеристика	Справочник	ХарактеристикиНоменклатуры
		НовСтр.Характеристика 		= ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
		//Цена	Число	
		НовСтр.Цена	= стрк.Цена;
		//Штрихкод	Строка	

	КонецЦикла;

	// -------------------------------------------  ТЧ СкидкиНаценки
	ОбъектДанных.СкидкиНаценки.Очистить();

	Для счТовары = 0 По деф.ТЧСкидкиНаценки.Количество()-1 Цикл
		стрк = деф.ТЧСкидкиНаценки[счТовары];
		НовСтр = ОбъектДанных.СкидкиНаценки.Добавить();

		НовСтр.КлючСвязи	=стрк.КлючСвязи;
		НовСтр.НапомнитьПозже	=стрк.НапомнитьПозже;
		Если стрк.СкидкаНаценка.свойство("Ref") Тогда
			НовСтр.СкидкаНаценка = ксп_ИмпортСлужебный.НайтиСкидкуНаценку(стрк.СкидкаНаценка, мВнешняяСистема);
		КонецЕсли;
		
		НовСтр.Сумма	=стрк.Сумма;
	КонецЦикла;
	
	
	// -------------------------------------------  ТЧ Серии
	ОбъектДанных.Серии.Очистить();

	Для счТовары = 0 По деф.ТЧСерии.Количество()-1 Цикл
		стрк = деф.ТЧСерии[счТовары];
		НовСтр = ОбъектДанных.Серии.Добавить();
	
		
		НовСтр.Количество= стрк.количество;
		НовСтр.Номенклатура	= ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура, мВнешняяСистема);
		НовСтр.Серия	= ксп_ИмпортСлужебный.НайтиСериюНоменклатурыПоГУИД(НовСтр.Номенклатура, стрк.Серия.СерияНомер, мВнешняяСистема);
		НовСтр.Характеристика	= ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика, мВнешняяСистема);


	КонецЦикла;
	
	
	
	// -------------------------------------------  ФИНАЛ

	
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	
	ОбъектДанных.Записать();
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	Если деф.isPosted Тогда 
		ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
	
	
	// добавить документ в РС для проведения
	
	ПроверитьКачествоДанных(ОбъектДанных);
	
	

	Возврат ОбъектДанных.Ссылка;
	
КонецФункции

#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	//Если Свойство = "Сумма" Тогда
	//	Возврат XMLЗначение(Тип("Число"),Значение);
	//КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Значение;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПроверитьКачествоДанных(ДокументОбъект)
	
	// проверить шапку
	
	Для каждого рек Из МассивРеквизитовШапкиДляПроверки() Цикл
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект[рек]) Тогда
			
			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.НетЗначения);
				
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект[рек]) 
			И НЕ ЗначениеЗаполнено(ДокументОбъект[рек].ВерсияДанных) Тогда

			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.БитаяСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// проверить все Табл Части
	
		
	Возврат Неопределено;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки()
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("МагазинОтправитель");
	//мРеквизиты.Добавить("МагазинПолучатель");
	//мРеквизиты.Добавить("Организация");
	//мРеквизиты.Добавить("ОрганизацияПолучатель");
	//мРеквизиты.Добавить("Ответственный");
	Возврат мРеквизиты;
	
КонецФункции


мВнешняяСистема = "erp";

