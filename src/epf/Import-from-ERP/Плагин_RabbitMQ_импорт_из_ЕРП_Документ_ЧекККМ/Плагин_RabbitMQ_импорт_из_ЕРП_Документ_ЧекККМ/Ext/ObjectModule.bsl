Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЧекККМ");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЧекККМ");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЧекККМ",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЧекККМ",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.чекккм") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_ЕРП";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта = "ЧекККМ";

	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText);		
		ЗафиксироватьТранзакцию();          		
		Возврат ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



//	ОбъектДанных.АдресЧекаЕГАИС = деф.АдресЧекаЕГАИС;

//	ОбъектДанных.АдресЭП = деф.АдресЭП;

//	гуид="";
//	ЕстьАтрибут = деф.АналитикаХозяйственнойОперации.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.АналитикаХозяйственнойОперации = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.АналитикаХозяйственнойОперации.Ref ) );
//	Иначе
//		ОбъектДанных.АналитикаХозяйственнойОперации = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.АналитикаХозяйственнойОперации = ксп_ИмпортСлужебный.НайтиАналитикаХозяйственнойОперации(деф.АналитикаХозяйственнойОперации);

//	ОбъектДанных.БонусыНачислены = деф.БонусыНачислены;

//	_знч = "";
//	ЕстьЗначение = деф.ВидОперации.свойство("Значение",_знч);
//	Если ЕстьЗначение Тогда
//		ОбъектДанных.ВидОперации = деф.ВидОперации.Значение;
//	Иначе
//		ОбъектДанных.ВидОперации = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ВидОперации = ксп_ИмпортСлужебный.НайтиПеречисление_ВидОперации(деф.ВидОперации);
	ОбъектДанных.ВидОперации = Перечисления.ВидыОперацийЧекККМ.Продажа;


//	гуид="";
//	ЕстьАтрибут = деф.ВладелецДисконтнойКарты.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ВладелецДисконтнойКарты = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ВладелецДисконтнойКарты.Ref ) );
//	Иначе
//		ОбъектДанных.ВладелецДисконтнойКарты = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ВладелецДисконтнойКарты = ксп_ИмпортСлужебный.НайтиВладелецДисконтнойКарты(деф.ВладелецДисконтнойКарты);

	ОбъектДанных.ВыручкаНаличными = деф.СуммаДокумента;

//	ОбъектДанных.ДатаРождения = деф.ДатаРождения;

//	гуид="";
//	ЕстьАтрибут = деф.ДисконтнаяКарта.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ДисконтнаяКарта = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДисконтнаяКарта.Ref ) );
//	Иначе
//		ОбъектДанных.ДисконтнаяКарта = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ДисконтнаяКарта = ксп_ИмпортСлужебный.НайтиДисконтнаяКарта(деф.ДисконтнаяКарта);

//	гуид="";
//	ЕстьАтрибут = деф.ДоговорКонтрагента.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ДоговорКонтрагента = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДоговорКонтрагента.Ref ) );
//	Иначе
//		ОбъектДанных.ДоговорКонтрагента = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговорКонтрагента(деф.ДоговорКонтрагента);

//	гуид="";
//	ЕстьАтрибут = деф.ДокументРасчета.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ДокументРасчета = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументРасчета.Ref ) );
//	Иначе
//		ОбъектДанных.ДокументРасчета = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ДокументРасчета = ксп_ИмпортСлужебный.НайтиДокументРасчета(деф.ДокументРасчета);

//	гуид="";
//	ЕстьАтрибут = деф.ЗаказПокупателя.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ЗаказПокупателя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗаказПокупателя.Ref ) );
//	Иначе
//		ОбъектДанных.ЗаказПокупателя = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ЗаказПокупателя = ксп_ИмпортСлужебный.НайтиЗаказПокупателя(деф.ЗаказПокупателя);

//	ОбъектДанных.ИдентификаторЧекаВОчереди = деф.ИдентификаторЧекаВОчереди;

//	гуид="";
//	ЕстьАтрибут = деф.КассаККМ.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.КассаККМ = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КассаККМ.Ref ) );
//	Иначе
//		ОбъектДанных.КассаККМ = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
	ОбъектДанных.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ);

//	ОбъектДанных.КодТРУ = деф.КодТРУ;

	ОбъектДанных.Комментарий = деф.Комментарий;

	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);

//	гуид="";
//	ЕстьАтрибут = деф.Магазин.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.Магазин = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Магазин.Ref ) );
//	Иначе
//		ОбъектДанных.Магазин = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.Магазин = ксп_ИмпортСлужебный.НайтиМагазин(деф.Магазин);

//	ОбъектДанных.НомерСменыККМ = деф.НомерСменыККМ;

//	ОбъектДанных.НомерЧекаККМ = деф.НомерЧекаККМ;

//	ОбъектДанных.ОперацияСДенежнымиСредствами = деф.ОперацияСДенежнымиСредствами;

//	ОбъектДанных.Оплачивается = деф.Оплачивается;

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	ОбъектДанных.Ответственный = Пользователи.ТекущийПользователь();

//	ОбъектДанных.ОтработанПереход = деф.ОтработанПереход;

//	гуид="";
//	ЕстьАтрибут = деф.ОтчетОРозничныхПродажах.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ОтчетОРозничныхПродажах = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ОтчетОРозничныхПродажах.Ref ) );
//	Иначе
//		ОбъектДанных.ОтчетОРозничныхПродажах = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ОтчетОРозничныхПродажах = ксп_ИмпортСлужебный.НайтиОтчетОРозничныхПродажах(деф.ОтчетОРозничныхПродажах);

//	ОбъектДанных.ПоДокументу = деф.ПоДокументу;

//	ОбъектДанных.ПодписьЧекаЕГАИС = деф.ПодписьЧекаЕГАИС;

//	гуид="";
//	ЕстьАтрибут = деф.Продавец.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.Продавец = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Продавец.Ref ) );
//	Иначе
//		ОбъектДанных.Продавец = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.Продавец = ксп_ИмпортСлужебный.НайтиПродавец(деф.Продавец);

//	_знч = "";
//	ЕстьЗначение = деф.СистемаНалогообложения.свойство("Значение",_знч);
//	Если ЕстьЗначение Тогда
//		ОбъектДанных.СистемаНалогообложения = деф.СистемаНалогообложения.Значение;
//	Иначе
//		ОбъектДанных.СистемаНалогообложения = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.СистемаНалогообложения = ксп_ИмпортСлужебный.НайтиПеречисление_СистемаНалогообложения(деф.СистемаНалогообложения);

	ОбъектДанных.СкидкиРассчитаны = деф.СкидкиРассчитаны;

//	ОбъектДанных.СсылкаЯндексКассы = деф.СсылкаЯндексКассы;

//	_знч = "";
//	ЕстьЗначение = деф.СтатусЧекаККМ.свойство("Значение",_знч);
//	Если ЕстьЗначение Тогда
//		ОбъектДанных.СтатусЧекаККМ = деф.СтатусЧекаККМ.Значение;
//	Иначе
//		ОбъектДанных.СтатусЧекаККМ = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.СтатусЧекаККМ = ксп_ИмпортСлужебный.НайтиПеречисление_СтатусЧекаККМ(деф.СтатусЧекаККМ);

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;

//	ОбъектДанных.Телефон = деф.Телефон;

//	ОбъектДанных.УникальныйИдентификаторПлатежа = деф.УникальныйИдентификаторПлатежа;


	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;

//	гуид="";
//	ЕстьАтрибут = деф.ЧекККМПродажа.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ЧекККМПродажа = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЧекККМПродажа.Ref ) );
//	Иначе
//		ОбъектДанных.ЧекККМПродажа = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ЧекККМПродажа = ксп_ИмпортСлужебный.НайтиЧекККМПродажа(деф.ЧекККМПродажа);




//	//------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();


	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.ДоговорКонтрагента.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ДоговорКонтрагента = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ДоговорКонтрагента.Ref ) );
//		Иначе
//			СтрокаТЧ.ДоговорКонтрагента = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговорКонтрагента(стрк.ДоговорКонтрагента);

//		гуид="";
//		ЕстьАтрибут = стрк.ЗаказПокупателя.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ЗаказПокупателя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЗаказПокупателя.Ref ) );
//		Иначе
//			СтрокаТЧ.ЗаказПокупателя = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ЗаказПокупателя = ксп_ИмпортСлужебный.НайтиЗаказПокупателя(стрк.ЗаказПокупателя);

		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.КлючСвязиСерийныхНомеров = стрк.КлючСвязиСерийныхНомеров;

//		СтрокаТЧ.КлючСвязиУслугаАгента = стрк.КлючСвязиУслугаАгента;

//		СтрокаТЧ.КодСтроки = стрк.КодСтроки;

		СтрокаТЧ.Количество = стрк.Количество;

		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

//		СтрокаТЧ.МРЦ = стрк.МРЦ;

//		СтрокаТЧ.НеобходимостьВводаАкцизнойМарки = стрк.НеобходимостьВводаАкцизнойМарки;

//		СтрокаТЧ.НеобходимостьВводаКодаМаркировки = стрк.НеобходимостьВводаКодаМаркировки;

//		гуид="";
//		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
//		Иначе
//			СтрокаТЧ.Номенклатура = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);

//		гуид="";
//		ЕстьАтрибут = стрк.Продавец.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Продавец = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Продавец.Ref ) );
//		Иначе
//			СтрокаТЧ.Продавец = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Продавец = ксп_ИмпортСлужебный.НайтиПродавец(стрк.Продавец);

//		СтрокаТЧ.ПродажаПодарка = стрк.ПродажаПодарка;

		СтрокаТЧ.ПроцентАвтоматическойСкидки = стрк.ПроцентАвтоматическойСкидки;

		СтрокаТЧ.ПроцентРучнойСкидки = стрк.ПроцентРучнойСкидки;

//		СтрокаТЧ.РегистрацияПродажи = стрк.РегистрацияПродажи;

//		СтрокаТЧ.Резервировать = стрк.Резервировать;

//		гуид="";
//		ЕстьАтрибут = стрк.Склад.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Склад = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Склад.Ref ) );
//		Иначе
//			СтрокаТЧ.Склад = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
		СтрокаТЧ.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);

//		_знч = "";
//		ЕстьЗначение = стрк.СтавкаНДС.свойство("Значение",_знч);
//		Если ЕстьЗначение Тогда
//			СтрокаТЧ.СтавкаНДС = стрк.СтавкаНДС.Значение;
//		Иначе
//			СтрокаТЧ.СтавкаНДС = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
		СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоСправочникуЕРП(стрк.СтавкаНДС);

//		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаАвтоматическойСкидки = стрк.СуммаАвтоматическойСкидки;

		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

		СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаРучнойСкидки;

//		СтрокаТЧ.СуммаСкидкиОплатыБонусом = стрк.СуммаСкидкиОплатыБонусом;

//		гуид="";
//		ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
//		Иначе
//			СтрокаТЧ.Упаковка = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);

//		гуид="";
//		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
//		Иначе
//			СтрокаТЧ.Характеристика = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);

		СтрокаТЧ.Цена = стрк.Цена;

		СтрокаТЧ.Штрихкод = стрк.Штрихкод;

	КонецЦикла;

//	//------------------------------------------------------     ТЧ Оплата



//	ОбъектДанных.Оплата.Очистить();


//	Для счТовары = 0 По деф.ТЧОплата.Количество()-1 Цикл
//		стрк = деф.ТЧОплата[счТовары];
//		СтрокаТЧ = ОбъектДанных.Оплата.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.БонуснаяПрограммаЛояльности.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.БонуснаяПрограммаЛояльности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.БонуснаяПрограммаЛояльности.Ref ) );
//		Иначе
//			СтрокаТЧ.БонуснаяПрограммаЛояльности = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.БонуснаяПрограммаЛояльности = ксп_ИмпортСлужебный.НайтиБонуснаяПрограммаЛояльности(стрк.БонуснаяПрограммаЛояльности);

//		гуид="";
//		ЕстьАтрибут = стрк.ВидОплаты.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ВидОплаты = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидОплаты.Ref ) );
//		Иначе
//			СтрокаТЧ.ВидОплаты = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ВидОплаты = ксп_ИмпортСлужебный.НайтиВидОплаты(стрк.ВидОплаты);

//		СтрокаТЧ.ДанныеПереданыВБанк = стрк.ДанныеПереданыВБанк;

//		гуид="";
//		ЕстьАтрибут = стрк.ДоговорКонтрагента.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ДоговорКонтрагента = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ДоговорКонтрагента.Ref ) );
//		Иначе
//			СтрокаТЧ.ДоговорКонтрагента = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговорКонтрагента(стрк.ДоговорКонтрагента);

//		СтрокаТЧ.КлючСвязиОплаты = стрк.КлючСвязиОплаты;

//		СтрокаТЧ.КоличествоБонусов = стрк.КоличествоБонусов;

//		СтрокаТЧ.КоличествоБонусовВСкидках = стрк.КоличествоБонусовВСкидках;

//		СтрокаТЧ.НомерПлатежнойКарты = стрк.НомерПлатежнойКарты;

//		СтрокаТЧ.НомерЧекаЭТ = стрк.НомерЧекаЭТ;

//		СтрокаТЧ.ПроцентКомиссии = стрк.ПроцентКомиссии;

//		СтрокаТЧ.СсылочныйНомер = стрк.СсылочныйНомер;

//		СтрокаТЧ.Сумма = стрк.Сумма;

//		СтрокаТЧ.СуммаБонусовВСкидках = стрк.СуммаБонусовВСкидках;

//		СтрокаТЧ.СуммаКомиссии = стрк.СуммаКомиссии;

//		гуид="";
//		ЕстьАтрибут = стрк.ЭквайринговыйТерминал.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ЭквайринговыйТерминал = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЭквайринговыйТерминал.Ref ) );
//		Иначе
//			СтрокаТЧ.ЭквайринговыйТерминал = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ЭквайринговыйТерминал = ксп_ИмпортСлужебный.НайтиЭквайринговыйТерминал(стрк.ЭквайринговыйТерминал);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ УправляемыеСкидки



//	ОбъектДанных.УправляемыеСкидки.Очистить();


//	Для счТовары = 0 По деф.ТЧУправляемыеСкидки.Количество()-1 Цикл
//		стрк = деф.ТЧУправляемыеСкидки[счТовары];
//		СтрокаТЧ = ОбъектДанных.УправляемыеСкидки.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.СкидкаНаценка.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.СкидкаНаценка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СкидкаНаценка.Ref ) );
//		Иначе
//			СтрокаТЧ.СкидкаНаценка = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.СкидкаНаценка = ксп_ИмпортСлужебный.НайтиСкидкаНаценка(стрк.СкидкаНаценка);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ Подарки



//	ОбъектДанных.Подарки.Очистить();


//	Для счТовары = 0 По деф.ТЧПодарки.Количество()-1 Цикл
//		стрк = деф.ТЧПодарки[счТовары];
//		СтрокаТЧ = ОбъектДанных.Подарки.Добавить();


//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.Количество = стрк.Количество;

//		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

//		гуид="";
//		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
//		Иначе
//			СтрокаТЧ.Номенклатура = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

//		гуид="";
//		ЕстьАтрибут = стрк.СкидкаНаценка.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.СкидкаНаценка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СкидкаНаценка.Ref ) );
//		Иначе
//			СтрокаТЧ.СкидкаНаценка = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.СкидкаНаценка = ксп_ИмпортСлужебный.НайтиСкидкаНаценка(стрк.СкидкаНаценка);

//		гуид="";
//		ЕстьАтрибут = стрк.Склад.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Склад = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Склад.Ref ) );
//		Иначе
//			СтрокаТЧ.Склад = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Склад = ксп_ИмпортСлужебный.НайтиСклад(стрк.Склад);

//		гуид="";
//		ЕстьАтрибут = стрк.Справка2.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Справка2 = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Справка2.Ref ) );
//		Иначе
//			СтрокаТЧ.Справка2 = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Справка2 = ксп_ИмпортСлужебный.НайтиСправка2(стрк.Справка2);

//		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

//		СтрокаТЧ.Сумма = стрк.Сумма;

//		гуид="";
//		ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
//		Иначе
//			СтрокаТЧ.Упаковка = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);

//		гуид="";
//		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
//		Иначе
//			СтрокаТЧ.Характеристика = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

//		СтрокаТЧ.Цена = стрк.Цена;

//		гуид="";
//		ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
//		Иначе
//			СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ СкидкиНаценки



//	ОбъектДанных.СкидкиНаценки.Очистить();


//	Для счТовары = 0 По деф.ТЧСкидкиНаценки.Количество()-1 Цикл
//		стрк = деф.ТЧСкидкиНаценки[счТовары];
//		СтрокаТЧ = ОбъектДанных.СкидкиНаценки.Добавить();


//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.ОграниченаМинимальнойЦеной = стрк.ОграниченаМинимальнойЦеной;

//		гуид="";
//		ЕстьАтрибут = стрк.СкидкаНаценка.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.СкидкаНаценка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СкидкаНаценка.Ref ) );
//		Иначе
//			СтрокаТЧ.СкидкаНаценка = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.СкидкаНаценка = ксп_ИмпортСлужебный.НайтиСкидкаНаценка(стрк.СкидкаНаценка);

//		СтрокаТЧ.Сумма = стрк.Сумма;

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ СерийныеНомера



//	ОбъектДанных.СерийныеНомера.Очистить();


//	Для счТовары = 0 По деф.ТЧСерийныеНомера.Количество()-1 Цикл
//		стрк = деф.ТЧСерийныеНомера[счТовары];
//		СтрокаТЧ = ОбъектДанных.СерийныеНомера.Добавить();


//		СтрокаТЧ.КлючСвязиСерийныхНомеров = стрк.КлючСвязиСерийныхНомеров;

//		гуид="";
//		ЕстьАтрибут = стрк.СерийныйНомер.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.СерийныйНомер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СерийныйНомер.Ref ) );
//		Иначе
//			СтрокаТЧ.СерийныйНомер = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.СерийныйНомер = ксп_ИмпортСлужебный.НайтиСерийныйНомер(стрк.СерийныйНомер);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ СерииПодарков



//	ОбъектДанных.СерииПодарков.Очистить();


//	Для счТовары = 0 По деф.ТЧСерииПодарков.Количество()-1 Цикл
//		стрк = деф.ТЧСерииПодарков[счТовары];
//		СтрокаТЧ = ОбъектДанных.СерииПодарков.Добавить();


//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.Количество = стрк.Количество;

//		гуид="";
//		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
//		Иначе
//			СтрокаТЧ.Номенклатура = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

//		гуид="";
//		ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
//		Иначе
//			СтрокаТЧ.Серия = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

//		гуид="";
//		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
//		Иначе
//			СтрокаТЧ.Характеристика = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ ПогашениеПодарочныхСертификатов



//	ОбъектДанных.ПогашениеПодарочныхСертификатов.Очистить();


//	Для счТовары = 0 По деф.ТЧПогашениеПодарочныхСертификатов.Количество()-1 Цикл
//		стрк = деф.ТЧПогашениеПодарочныхСертификатов[счТовары];
//		СтрокаТЧ = ОбъектДанных.ПогашениеПодарочныхСертификатов.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.ПодарочныйСертификат.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ПодарочныйСертификат = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ПодарочныйСертификат.Ref ) );
//		Иначе
//			СтрокаТЧ.ПодарочныйСертификат = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ПодарочныйСертификат = ксп_ИмпортСлужебный.НайтиПодарочныйСертификат(стрк.ПодарочныйСертификат);

//		гуид="";
//		ЕстьАтрибут = стрк.СерийныйНомер.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.СерийныйНомер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СерийныйНомер.Ref ) );
//		Иначе
//			СтрокаТЧ.СерийныйНомер = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.СерийныйНомер = ксп_ИмпортСлужебный.НайтиСерийныйНомер(стрк.СерийныйНомер);

//		СтрокаТЧ.СуммаПогашенияСертификата = стрк.СуммаПогашенияСертификата;

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ Серии



//	ОбъектДанных.Серии.Очистить();


//	Для счТовары = 0 По деф.ТЧСерии.Количество()-1 Цикл
//		стрк = деф.ТЧСерии[счТовары];
//		СтрокаТЧ = ОбъектДанных.Серии.Добавить();


//		СтрокаТЧ.Количество = стрк.Количество;

//		гуид="";
//		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
//		Иначе
//			СтрокаТЧ.Номенклатура = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

//		гуид="";
//		ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
//		Иначе
//			СтрокаТЧ.Серия = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

//		гуид="";
//		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
//		Иначе
//			СтрокаТЧ.Характеристика = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ БонусныеБаллыКНачислению



//	ОбъектДанных.БонусныеБаллыКНачислению.Очистить();


//	Для счТовары = 0 По деф.ТЧБонусныеБаллыКНачислению.Количество()-1 Цикл
//		стрк = деф.ТЧБонусныеБаллыКНачислению[счТовары];
//		СтрокаТЧ = ОбъектДанных.БонусныеБаллыКНачислению.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.БонуснаяПрограммаЛояльности.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.БонуснаяПрограммаЛояльности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.БонуснаяПрограммаЛояльности.Ref ) );
//		Иначе
//			СтрокаТЧ.БонуснаяПрограммаЛояльности = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.БонуснаяПрограммаЛояльности = ксп_ИмпортСлужебный.НайтиБонуснаяПрограммаЛояльности(стрк.БонуснаяПрограммаЛояльности);

//		СтрокаТЧ.ДатаНачисления = стрк.ДатаНачисления;

//		СтрокаТЧ.ДатаСписания = стрк.ДатаСписания;

//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.КоличествоБонусныхБаллов = стрк.КоличествоБонусныхБаллов;

//		гуид="";
//		ЕстьАтрибут = стрк.СкидкаНаценка.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.СкидкаНаценка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СкидкаНаценка.Ref ) );
//		Иначе
//			СтрокаТЧ.СкидкаНаценка = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.СкидкаНаценка = ксп_ИмпортСлужебный.НайтиСкидкаНаценка(стрк.СкидкаНаценка);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ АкцизныеМарки



//	ОбъектДанных.АкцизныеМарки.Очистить();


//	Для счТовары = 0 По деф.ТЧАкцизныеМарки.Количество()-1 Цикл
//		стрк = деф.ТЧАкцизныеМарки[счТовары];
//		СтрокаТЧ = ОбъектДанных.АкцизныеМарки.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.АкцизнаяМарка.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.АкцизнаяМарка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АкцизнаяМарка.Ref ) );
//		Иначе
//			СтрокаТЧ.АкцизнаяМарка = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.АкцизнаяМарка = ксп_ИмпортСлужебный.НайтиАкцизнаяМарка(стрк.АкцизнаяМарка);

//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.КодАкцизнойМарки = стрк.КодАкцизнойМарки;

//		гуид="";
//		ЕстьАтрибут = стрк.Справка2.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Справка2 = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Справка2.Ref ) );
//		Иначе
//			СтрокаТЧ.Справка2 = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Справка2 = ксп_ИмпортСлужебный.НайтиСправка2(стрк.Справка2);

//		гуид="";
//		ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
//		Иначе
//			СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ ПредъявленныеКодыОднократныхСкидок



//	ОбъектДанных.ПредъявленныеКодыОднократныхСкидок.Очистить();


//	Для счТовары = 0 По деф.ТЧПредъявленныеКодыОднократныхСкидок.Количество()-1 Цикл
//		стрк = деф.ТЧПредъявленныеКодыОднократныхСкидок[счТовары];
//		СтрокаТЧ = ОбъектДанных.ПредъявленныеКодыОднократныхСкидок.Добавить();


//		СтрокаТЧ.КодСкидки = стрк.КодСкидки;

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ КодыМаркировки



//	ОбъектДанных.КодыМаркировки.Очистить();


//	Для счТовары = 0 По деф.ТЧКодыМаркировки.Количество()-1 Цикл
//		стрк = деф.ТЧКодыМаркировки[счТовары];
//		СтрокаТЧ = ОбъектДанных.КодыМаркировки.Добавить();


//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.КодМаркировки = стрк.КодМаркировки;

//		_знч = "";
//		ЕстьЗначение = стрк.ТипКода.свойство("Значение",_знч);
//		Если ЕстьЗначение Тогда
//			СтрокаТЧ.ТипКода = стрк.ТипКода.Значение;
//		Иначе
//			СтрокаТЧ.ТипКода = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ТипКода = ксп_ИмпортСлужебный.НайтиПеречисление_ТипКода(стрк.ТипКода);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ ТоварыОрганизации



//	ОбъектДанных.ТоварыОрганизации.Очистить();


//	Для счТовары = 0 По деф.ТЧТоварыОрганизации.Количество()-1 Цикл
//		стрк = деф.ТЧТоварыОрганизации[счТовары];
//		СтрокаТЧ = ОбъектДанных.ТоварыОрганизации.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.Договор.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Договор = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Договор.Ref ) );
//		Иначе
//			СтрокаТЧ.Договор = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Договор = ксп_ИмпортСлужебный.НайтиДоговор(стрк.Договор);

//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.Количество = стрк.Количество;

//		гуид="";
//		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
//		Иначе
//			СтрокаТЧ.Номенклатура = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

//		гуид="";
//		ЕстьАтрибут = стрк.НомерГТД.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.НомерГТД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НомерГТД.Ref ) );
//		Иначе
//			СтрокаТЧ.НомерГТД = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.НомерГТД = ксп_ИмпортСлужебный.НайтиНомерГТД(стрк.НомерГТД);

//		гуид="";
//		ЕстьАтрибут = стрк.Поставщик.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Поставщик = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Поставщик.Ref ) );
//		Иначе
//			СтрокаТЧ.Поставщик = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Поставщик = ксп_ИмпортСлужебный.НайтиПоставщик(стрк.Поставщик);

//		гуид="";
//		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
//		Иначе
//			СтрокаТЧ.Характеристика = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

//	КонецЦикла;


	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции






#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	//Если Свойство = "Сумма" Тогда
	//	Возврат XMLЗначение(Тип("Число"),Значение);
	//КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Значение;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("МагазинОтправитель");
	//мРеквизиты.Добавить("МагазинПолучатель");
	//мРеквизиты.Добавить("Организация");
	//мРеквизиты.Добавить("ОрганизацияПолучатель");
	//мРеквизиты.Добавить("Ответственный");
	Возврат мРеквизиты;
	
КонецФункции


мВнешняяСистема = "erp";

