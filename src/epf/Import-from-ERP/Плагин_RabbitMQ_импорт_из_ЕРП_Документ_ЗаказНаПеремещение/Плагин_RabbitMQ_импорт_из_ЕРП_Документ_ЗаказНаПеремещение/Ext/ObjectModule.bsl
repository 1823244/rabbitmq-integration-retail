Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.2");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказНаПеремещение");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказНаПеремещение");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказНаПеремещение",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказНаПеремещение",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	






// в регистр сведений
Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.заказнаперемещение") Тогда
		Возврат Неопределено;
	КонецЕсли;
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	НаборЗаписей = РегистрыСведений.ксп_ЗаказНаПеремещение_ЕРП.создатьНаборЗаписей();
	НаборЗаписей.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей.Отбор.ВнешняяСистема.установить(мВнешняяСистема);
	ОбъектДанных = НаборЗаписей.Добавить();


	ОбъектДанных.ГУИД = id.Ref;
	ОбъектДанных.ВнешняяСистема = мВнешняяСистема;


	//-------------------- ЗАПОЛНЕНИЕ РЕКВИЗИТОВ

	ОбъектДанных.НомерДокумента = деф.Number;
	ОбъектДанных.ДатаДокумента = деф.Date;
	ОбъектДанных.Проведен = деф.isPosted;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	гуид="";
	ЕстьАтрибут = деф.Автор.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Автор = деф.Автор.Ref;
	Иначе
		ОбъектДанных.Автор = Неопределено;
	КонецЕсли;
	ОбъектДанных.АдресДоставки = деф.АдресДоставки;
	ОбъектДанных.АдресДоставкиЗначение = деф.АдресДоставкиЗначение;
	ОбъектДанных.АдресДоставкиЗначенияПолей = деф.АдресДоставкиЗначенияПолей;
	ОбъектДанных.АдресДоставкиПеревозчика = деф.АдресДоставкиПеревозчика;
	ОбъектДанных.АдресДоставкиПеревозчикаЗначение = деф.АдресДоставкиПеревозчикаЗначение;
	ОбъектДанных.АдресДоставкиПеревозчикаЗначенияПолей = деф.АдресДоставкиПеревозчикаЗначенияПолей;
	_знч = "";
	ЕстьЗначение = деф.ВариантПриемкиТоваров.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ВариантПриемкиТоваров = деф.ВариантПриемкиТоваров.Значение;
	Иначе
		ОбъектДанных.ВариантПриемкиТоваров = Неопределено;
	КонецЕсли;
	ОбъектДанных.ВремяДоставкиПо = деф.ВремяДоставкиПо;
	ОбъектДанных.ВремяДоставкиС = деф.ВремяДоставкиС;
	ОбъектДанных.ДлительностьПеремещения = деф.ДлительностьПеремещения;
	гуид="";
	ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ДокументОснование = деф.ДокументОснование.Ref;
	Иначе
		ОбъектДанных.ДокументОснование = Неопределено;
	КонецЕсли;
	ОбъектДанных.ДополнительнаяИнформацияПоДоставке = деф.ДополнительнаяИнформацияПоДоставке;
	ОбъектДанных.ЖелаемаяДатаПоступления = деф.ЖелаемаяДатаПоступления;
	гуид="";
	ЕстьАтрибут = деф.ЗонаДоставки.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ЗонаДоставки = деф.ЗонаДоставки.Ref;
	Иначе
		ОбъектДанных.ЗонаДоставки = Неопределено;
	КонецЕсли;
	ОбъектДанных.ИспользоватьДлительностьПеремещения = деф.ИспользоватьДлительностьПеремещения;
	ОбъектДанных.Комментарий = деф.Комментарий;
	ОбъектДанных.МаксимальныйКодСтроки = деф.МаксимальныйКодСтроки;
	гуид="";
	ЕстьАтрибут = деф.Назначение.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Назначение = деф.Назначение.Ref;
	Иначе
		ОбъектДанных.Назначение = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.НаправлениеДеятельности.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.НаправлениеДеятельности = деф.НаправлениеДеятельности.Ref;
	Иначе
		ОбъектДанных.НаправлениеДеятельности = Неопределено;
	КонецЕсли;
	ОбъектДанных.ОбосабливатьПоНазначениюЗаказа = деф.ОбосабливатьПоНазначениюЗаказа;
	гуид="";
	ЕстьАтрибут = деф.Организация.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Организация = деф.Организация.Ref;
	Иначе
		ОбъектДанных.Организация = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.ОрганизацияПолучатель.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ОрганизацияПолучатель = деф.ОрганизацияПолучатель.Ref;
	Иначе
		ОбъектДанных.ОрганизацияПолучатель = Неопределено;
	КонецЕсли;
	ОбъектДанных.ОсобыеУсловияПеревозки = деф.ОсобыеУсловияПеревозки;
	ОбъектДанных.ОсобыеУсловияПеревозкиОписание = деф.ОсобыеУсловияПеревозкиОписание;
	гуид="";
	ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Ответственный = деф.Ответственный.Ref;
	Иначе
		ОбъектДанных.Ответственный = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.ПеревозчикПартнер.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ПеревозчикПартнер = деф.ПеревозчикПартнер.Ref;
	Иначе
		ОбъектДанных.ПеревозчикПартнер = Неопределено;
	КонецЕсли;
	_знч = "";
	ЕстьЗначение = деф.ПеремещениеПодДеятельность.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ПеремещениеПодДеятельность = деф.ПеремещениеПодДеятельность.Значение;
	Иначе
		ОбъектДанных.ПеремещениеПодДеятельность = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Подразделение = деф.Подразделение.Ref;
	Иначе
		ОбъектДанных.Подразделение = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.Приоритет.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Приоритет = деф.Приоритет.Ref;
	Иначе
		ОбъектДанных.Приоритет = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.Сделка.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Сделка = деф.Сделка.Ref;
	Иначе
		ОбъектДанных.Сделка = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.СкладОтправитель.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.СкладОтправитель = деф.СкладОтправитель.Ref;
	Иначе
		ОбъектДанных.СкладОтправитель = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.СкладПолучатель.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.СкладПолучатель = деф.СкладПолучатель.Ref;
	Иначе
		ОбъектДанных.СкладПолучатель = Неопределено;
	КонецЕсли;
	_знч = "";
	ЕстьЗначение = деф.СостояниеЗаполненияМногооборотнойТары.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = деф.СостояниеЗаполненияМногооборотнойТары.Значение;
	Иначе
		ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = Неопределено;
	КонецЕсли;
	_знч = "";
	ЕстьЗначение = деф.СпособДоставки.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.СпособДоставки = деф.СпособДоставки.Значение;
	Иначе
		ОбъектДанных.СпособДоставки = Неопределено;
	КонецЕсли;
	_знч = "";
	ЕстьЗначение = деф.Статус.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.Статус = деф.Статус.Значение;
	Иначе
		ОбъектДанных.Статус = Неопределено;
	КонецЕсли;
	_знч = "";
	ЕстьЗначение = деф.ХозяйственнаяОперация.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ХозяйственнаяОперация = деф.ХозяйственнаяОперация.Значение;
	Иначе
		ОбъектДанных.ХозяйственнаяОперация = Неопределено;
	КонецЕсли;

	НаборЗаписей.Записать();


	//------------------------------------------------------     ТЧ Товары



	НаборЗаписей_ТЧТовары = РегистрыСведений.ксп_ЗаказНаПеремещение_ЕРП_Товары.СоздатьНаборЗаписей();
	НаборЗаписей_ТЧТовары.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей_ТЧТовары.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	счНомерСтроки = 0;

	Для сч = 0 По деф.ТЧТовары.Количество()-1 Цикл

		стрк = деф.ТЧТовары[сч];

		СтрокаТЧ = НаборЗаписей_ТЧТовары.Добавить();
	СтрокаТЧ.ГУИД = id.Ref;
	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
		_знч = "";
		ЕстьЗначение = стрк.ВариантОбеспечения.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			СтрокаТЧ.ВариантОбеспечения = стрк.ВариантОбеспечения.Значение;
		Иначе
			СтрокаТЧ.ВариантОбеспечения = Неопределено;
		КонецЕсли;
		_знч = "";
		ЕстьЗначение = стрк.ВариантОбеспеченияДоИзмененияОбновлениемИБ.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			СтрокаТЧ.ВариантОбеспеченияДоИзмененияОбновлениемИБ = стрк.ВариантОбеспеченияДоИзмененияОбновлениемИБ.Значение;
		Иначе
			СтрокаТЧ.ВариантОбеспеченияДоИзмененияОбновлениемИБ = Неопределено;
		КонецЕсли;
		СтрокаТЧ.КодСтроки = стрк.КодСтроки;

		СтрокаТЧ.Количество = стрк.Количество;

		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

		гуид="";
		ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Назначение = стрк.Назначение.Ref;
		Иначе
			СтрокаТЧ.Назначение = Неопределено;
		КонецЕсли;
		СтрокаТЧ.НачалоОтгрузки = стрк.НачалоОтгрузки;

		гуид="";
		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Номенклатура = стрк.Номенклатура.Ref;
		Иначе
			СтрокаТЧ.Номенклатура = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.НоменклатураНабора.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.НоменклатураНабора = стрк.НоменклатураНабора.Ref;
		Иначе
			СтрокаТЧ.НоменклатураНабора = Неопределено;
		КонецЕсли;
		СтрокаТЧ.Обособленно = стрк.Обособленно;

		СтрокаТЧ.ОкончаниеПоступления = стрк.ОкончаниеПоступления;

		СтрокаТЧ.Отменено = стрк.Отменено;

		гуид="";
		ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Серия = стрк.Серия.Ref;
		Иначе
			СтрокаТЧ.Серия = Неопределено;
		КонецЕсли;
		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		гуид="";
		ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Упаковка = стрк.Упаковка.Ref;
		Иначе
			СтрокаТЧ.Упаковка = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Характеристика = стрк.Характеристика.Ref;
		Иначе
			СтрокаТЧ.Характеристика = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.ХарактеристикаНабора.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.ХарактеристикаНабора = стрк.ХарактеристикаНабора.Ref;
		Иначе
			СтрокаТЧ.ХарактеристикаНабора = Неопределено;
		КонецЕсли;
		СтрокаТЧ._НомерСтроки = счНомерСтроки;

		счНомерСтроки = счНомерСтроки + 1;

	КонецЦикла;

	НаборЗаписей_ТЧТовары.Записать();
	//------------------------------------------------------     ТЧ ДополнительныеРеквизиты



	НаборЗаписей_ТЧДополнительныеРеквизиты = РегистрыСведений.ксп_ЗаказНаПеремещение_ЕРП_ДополнительныеРеквизиты.СоздатьНаборЗаписей();
	НаборЗаписей_ТЧДополнительныеРеквизиты.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей_ТЧДополнительныеРеквизиты.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	счНомерСтроки = 0;

	Для сч = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл

		стрк = деф.ТЧДополнительныеРеквизиты[сч];

		СтрокаТЧ = НаборЗаписей_ТЧДополнительныеРеквизиты.Добавить();
	СтрокаТЧ.ГУИД = id.Ref;
	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
		гуид="";
		ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Значение = стрк.Значение.Ref;
		Иначе
			СтрокаТЧ.Значение = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Свойство = стрк.Свойство.Ref;
		Иначе
			СтрокаТЧ.Свойство = Неопределено;
		КонецЕсли;
		СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

		СтрокаТЧ._НомерСтроки = счНомерСтроки;

		счНомерСтроки = счНомерСтроки + 1;

	КонецЦикла;

	НаборЗаписей_ТЧДополнительныеРеквизиты.Записать();



	//------------------------------------------------------ ФИНАЛ


КонецФункции



#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("МагазинОтправитель");
	//мРеквизиты.Добавить("МагазинПолучатель");
	//мРеквизиты.Добавить("Организация");
	//мРеквизиты.Добавить("ОрганизацияПолучатель");
	//мРеквизиты.Добавить("Ответственный");
	Возврат мРеквизиты;
	
КонецФункции


мВнешняяСистема = "erp";

