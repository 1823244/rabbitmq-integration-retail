Перем мВнешняяСистема;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_ВидыЦен");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_ВидыЦен");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_ВидыЦен",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_ВидыЦен",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("справочник.видыцен") Тогда
		Возврат Неопределено;
	КонецЕсли;
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	//------------------------------------- работа с мэппингом
	
	НаименованиеДляМэппинга = деф.Description;
	
	ПоМэппингу = Неопределено;
	Если РегистрыСведений.ксп_МэппингСправочникВидыЦен.ЕстьГУИД(id.Ref, мВнешняяСистема) Тогда
		ПоМэппингу = РегистрыСведений.ксп_МэппингСправочникВидыЦен.ПоМэппингу(id.Ref, мВнешняяСистема);
	Иначе 
		РегистрыСведений.ксп_МэппингСправочникВидыЦен.ДобавитьГУИД(id.Ref, НаименованиеДляМэппинга, мВнешняяСистема);
		// здесь идеально было бы отправить алерт, чтобы пользователь проставил мэппинг
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоМэппингу) Тогда
		Возврат ПоМэппингу;
	КонецЕсли;
	
	//------------------------------------- работа с GUID
	
	СуществующийОбъект = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		СуществующийОбъект = Неопределено;
	Иначе 
		
		ОбъектДанных = Справочники.ВидыЦен.СоздатьЭлемент();
		СсылкаНового = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	ОбъектДанных.Наименование = деф.Description;
	//ОбъектДанных.Код = id.Code;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	//ОбъектДанных.АлгоритмРасчетаЦены = деф.АлгоритмРасчетаЦены;

	ОбъектДанных.ВалютаЦены = "руб.";

	ОбъектДанных.Идентификатор = деф.Идентификатор;

	//ОбъектДанных.ИспользоватьПриПередачеМеждуОрганизациями = деф.ИспользоватьПриПередачеМеждуОрганизациями;

	//ОбъектДанных.ИспользоватьПриПродаже = деф.ИспользоватьПриПродаже;

	ОбъектДанных.ОкруглятьВБольшуюСторону = деф.ОкруглятьВБольшуюСторону;

	ОбъектДанных.ПорогСрабатывания = деф.ПорогСрабатывания;

	//ОбъектДанных.РеквизитДопУпорядочивания = деф.РеквизитДопУпорядочивания;

	_знч = "";
	ЕстьЗначение = деф.СпособЗаданияЦены.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.СпособЗаданияЦены = ксп_ИмпортСлужебный.НайтиПеречисление_СпособЗаданияЦены_ЕРП(_знч, мВнешняяСистема);
	Иначе
		ОбъектДанных.СпособЗаданияЦены = Неопределено;
	КонецЕсли;
	

	//ОбъектДанных.СхемаКомпоновкиДанных = деф.СхемаКомпоновкиДанных;



	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;




	////------------------------------------------------------     ТЧ ВлияющиеВидыЦен



	ОбъектДанных.ВлияющиеВидыЦен.Очистить();


	Для счТовары = 0 По деф.ТЧВлияющиеВидыЦен.Количество()-1 Цикл
		стрк = деф.ТЧВлияющиеВидыЦен[счТовары];
		СтрокаТЧ = ОбъектДанных.ВлияющиеВидыЦен.Добавить();


		гуид="";
		ЕстьАтрибут = стрк.ВлияющийВидЦен.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.ВлияющийВидЦен = ксп_ИмпортСлужебный.НайтиВидЦен(стрк.ВлияющийВидЦен, мВнешняяСистема);
		Иначе
			СтрокаТЧ.ВлияющийВидЦен = Неопределено;
		КонецЕсли;

	КонецЦикла;

	////------------------------------------------------------     ТЧ ЦеновыеГруппы



	//ОбъектДанных.ЦеновыеГруппы.Очистить();


	//Для счТовары = 0 По деф.ТЧЦеновыеГруппы.Количество()-1 Цикл
	//	стрк = деф.ТЧЦеновыеГруппы[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ЦеновыеГруппы.Добавить();


	//	СтрокаТЧ.АлгоритмРасчетаЦены = стрк.АлгоритмРасчетаЦены;

	//	гуид="";
	//	ЕстьАтрибут = стрк.ЦеноваяГруппа.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ЦеноваяГруппа = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЦеноваяГруппа.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ЦеноваяГруппа = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЦеноваяГруппа = ксп_ИмпортСлужебный.НайтиЦеноваяГруппа(стрк.ЦеноваяГруппа);

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ПравилаОкругленияЦены



	//ОбъектДанных.ПравилаОкругленияЦены.Очистить();


	//Для счТовары = 0 По деф.ТЧПравилаОкругленияЦены.Количество()-1 Цикл
	//	стрк = деф.ТЧПравилаОкругленияЦены[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ПравилаОкругленияЦены.Добавить();


	//	СтрокаТЧ.НижняяГраницаДиапазонаЦен = стрк.НижняяГраницаДиапазонаЦен;

	//	СтрокаТЧ.ПсихологическоеОкругление = стрк.ПсихологическоеОкругление;

	//	СтрокаТЧ.ТочностьОкругления = стрк.ТочностьОкругления;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ПорогиСрабатывания



	//ОбъектДанных.ПорогиСрабатывания.Очистить();


	//Для счТовары = 0 По деф.ТЧПорогиСрабатывания.Количество()-1 Цикл
	//	стрк = деф.ТЧПорогиСрабатывания[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ПорогиСрабатывания.Добавить();


	//	СтрокаТЧ.ПорогСрабатывания = стрк.ПорогСрабатывания;

	//	гуид="";
	//	ЕстьАтрибут = стрк.ЦеноваяГруппа.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ЦеноваяГруппа = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЦеноваяГруппа.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ЦеноваяГруппа = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЦеноваяГруппа = ксп_ИмпортСлужебный.НайтиЦеноваяГруппа(стрк.ЦеноваяГруппа);

	//КонецЦикла;




	//------------------------------------------------------ ФИНАЛ


	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();


	// Созданный элемент добавляем в регистр мэппингов (если есть), т.к. это выглядит логичным для пользователя
	РегистрыСведений.ксп_МэппингСправочникВидыЦен.ДобавитьЗапись(id.Ref, НаименованиеДляМэппинга, мВнешняяСистема, ОбъектДанных.Ссылка);


	// сохранить исходный json
	//РегистрыСведений.ксп_ИсходныеДанныеСообщений.ДобавитьЗапись(ОбъектДанных.Ссылка, jsonText);


	Возврат ОбъектДанных.Ссылка;
	
КонецФункции



#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта, json);
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции


#КонецОбласти 	

мВнешняяСистема = "erp";