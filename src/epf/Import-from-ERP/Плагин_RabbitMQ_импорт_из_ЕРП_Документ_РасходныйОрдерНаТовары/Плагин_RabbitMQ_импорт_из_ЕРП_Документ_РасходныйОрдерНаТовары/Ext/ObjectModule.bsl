Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.2");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РасходныйОрдерНаТовары");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РасходныйОрдерНаТовары");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РасходныйОрдерНаТовары",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РасходныйОрдерНаТовары",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	




// в регистр сведений
Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.расходныйордернатовары") Тогда
		Возврат Неопределено;
	КонецЕсли;
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	НаборЗаписей = РегистрыСведений.ксп_РасходныйОрдерНаТовары_ЕРП.создатьНаборЗаписей();
	НаборЗаписей.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей.Отбор.ВнешняяСистема.установить(мВнешняяСистема);
	ОбъектДанных = НаборЗаписей.Добавить();


	ОбъектДанных.ГУИД = id.Ref;
	ОбъектДанных.ВнешняяСистема = мВнешняяСистема;


	//-------------------- ЗАПОЛНЕНИЕ РЕКВИЗИТОВ

	ОбъектДанных.НомерДокумента = id.Number;
	ОбъектДанных.ДатаДокумента = id.Date;
	ОбъектДанных.Проведен = деф.isPosted;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	ОбъектДанных.ВсегоМест = деф.ВсегоМест;
	ОбъектДанных.ДатаОтгрузки = деф.ДатаОтгрузки;
	гуид="";
	ЕстьАтрибут = деф.ЗаданиеНаПеревозку.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ЗаданиеНаПеревозку = деф.ЗаданиеНаПеревозку.Ref;
	Иначе
		ОбъектДанных.ЗаданиеНаПеревозку = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.ЗонаОтгрузки.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ЗонаОтгрузки = деф.ЗонаОтгрузки.Ref;
	Иначе
		ОбъектДанных.ЗонаОтгрузки = Неопределено;
	КонецЕсли;
	ОбъектДанных.Комментарий = деф.Комментарий;
	гуид="";
	ЕстьАтрибут = деф.Контролер.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Контролер = деф.Контролер.Ref;
	Иначе
		ОбъектДанных.Контролер = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Ответственный = деф.Ответственный.Ref;
	Иначе
		ОбъектДанных.Ответственный = Неопределено;
	КонецЕсли;
	ОбъектДанных.ОтгрузкаПоЗаданиюНаПеревозку = деф.ОтгрузкаПоЗаданиюНаПеревозку;
	гуид="";
	ЕстьАтрибут = деф.Получатель.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Получатель = деф.Получатель.Ref;
	Иначе
		ОбъектДанных.Получатель = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.Помещение.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Помещение = деф.Помещение.Ref;
	Иначе
		ОбъектДанных.Помещение = Неопределено;
	КонецЕсли;
	ОбъектДанных.ПорядокДоставки = деф.ПорядокДоставки;
	гуид="";
	ЕстьАтрибут = деф.Приоритет.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Приоритет = деф.Приоритет.Ref;
	Иначе
		ОбъектДанных.Приоритет = Неопределено;
	КонецЕсли;
	ОбъектДанных.РежимПросмотраПоТоварам = деф.РежимПросмотраПоТоварам;
	гуид="";
	ЕстьАтрибут = деф.Склад.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Склад = деф.Склад.Ref;
	Иначе
		ОбъектДанных.Склад = Неопределено;
	КонецЕсли;
	_знч = "";
	ЕстьЗначение = деф.СкладскаяОперация.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.СкладскаяОперация = деф.СкладскаяОперация.Значение;
	Иначе
		ОбъектДанных.СкладскаяОперация = Неопределено;
	КонецЕсли;
	_знч = "";
	ЕстьЗначение = деф.Статус.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.Статус = деф.Статус.Значение;
	Иначе
		ОбъектДанных.Статус = Неопределено;
	КонецЕсли;

	НаборЗаписей.Записать();


	//------------------------------------------------------     ТЧ ТоварыПоРаспоряжениям



	НаборЗаписей_ТЧТоварыПоРаспоряжениям = РегистрыСведений.ксп_РасходныйОрдерНаТовары_ЕРП_ТоварыПоРаспоряжениям.СоздатьНаборЗаписей();
	НаборЗаписей_ТЧТоварыПоРаспоряжениям.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей_ТЧТоварыПоРаспоряжениям.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	счНомерСтроки = 0;

	Для сч = 0 По деф.ТЧТоварыПоРаспоряжениям.Количество()-1 Цикл

		стрк = деф.ТЧТоварыПоРаспоряжениям[сч];

		СтрокаТЧ = НаборЗаписей_ТЧТоварыПоРаспоряжениям.Добавить();
	СтрокаТЧ.ГУИД = id.Ref;
	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
		СтрокаТЧ.Количество = стрк.Количество;

		гуид="";
		ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Назначение = стрк.Назначение.Ref;
		Иначе
			СтрокаТЧ.Назначение = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Номенклатура = стрк.Номенклатура.Ref;
		Иначе
			СтрокаТЧ.Номенклатура = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Распоряжение.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Распоряжение = стрк.Распоряжение.Ref;
		Иначе
			СтрокаТЧ.Распоряжение = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Серия = стрк.Серия.Ref;
		Иначе
			СтрокаТЧ.Серия = Неопределено;
		КонецЕсли;
		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		гуид="";
		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Характеристика = стрк.Характеристика.Ref;
		Иначе
			СтрокаТЧ.Характеристика = Неопределено;
		КонецЕсли;
		СтрокаТЧ._НомерСтроки = счНомерСтроки;

		счНомерСтроки = счНомерСтроки + 1;

	КонецЦикла;

	НаборЗаписей_ТЧТоварыПоРаспоряжениям.Записать();
	//------------------------------------------------------     ТЧ ОтгружаемыеТовары



	НаборЗаписей_ТЧОтгружаемыеТовары = РегистрыСведений.ксп_РасходныйОрдерНаТовары_ЕРП_ОтгружаемыеТовары.СоздатьНаборЗаписей();
	НаборЗаписей_ТЧОтгружаемыеТовары.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей_ТЧОтгружаемыеТовары.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	счНомерСтроки = 0;

	Для сч = 0 По деф.ТЧОтгружаемыеТовары.Количество()-1 Цикл

		стрк = деф.ТЧОтгружаемыеТовары[сч];

		СтрокаТЧ = НаборЗаписей_ТЧОтгружаемыеТовары.Добавить();
	СтрокаТЧ.ГУИД = id.Ref;
	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
		_знч = "";
		ЕстьЗначение = стрк.Действие.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			СтрокаТЧ.Действие = стрк.Действие.Значение;
		Иначе
			СтрокаТЧ.Действие = Неопределено;
		КонецЕсли;
		СтрокаТЧ.Количество = стрк.Количество;

		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

		гуид="";
		ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Назначение = стрк.Назначение.Ref;
		Иначе
			СтрокаТЧ.Назначение = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Номенклатура = стрк.Номенклатура.Ref;
		Иначе
			СтрокаТЧ.Номенклатура = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Серия = стрк.Серия.Ref;
		Иначе
			СтрокаТЧ.Серия = Неопределено;
		КонецЕсли;
		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		гуид="";
		ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Упаковка = стрк.Упаковка.Ref;
		Иначе
			СтрокаТЧ.Упаковка = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.УпаковочныйЛист.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.УпаковочныйЛист = стрк.УпаковочныйЛист.Ref;
		Иначе
			СтрокаТЧ.УпаковочныйЛист = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.УпаковочныйЛистРодитель.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.УпаковочныйЛистРодитель = стрк.УпаковочныйЛистРодитель.Ref;
		Иначе
			СтрокаТЧ.УпаковочныйЛистРодитель = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Характеристика = стрк.Характеристика.Ref;
		Иначе
			СтрокаТЧ.Характеристика = Неопределено;
		КонецЕсли;
		СтрокаТЧ.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста = стрк.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста;

		СтрокаТЧ.ЭтоУпаковочныйЛист = стрк.ЭтоУпаковочныйЛист;

		СтрокаТЧ._НомерСтроки = счНомерСтроки;

		счНомерСтроки = счНомерСтроки + 1;

	КонецЦикла;

	НаборЗаписей_ТЧОтгружаемыеТовары.Записать();
	
	////------------------------------------------------------     ТЧ ДополнительныеРеквизиты



	//НаборЗаписей_ТЧДополнительныеРеквизиты = РегистрыСведений.РасходныйОрдерНаТовары_ТЧ_ДополнительныеРеквизиты__.СоздатьНаборЗаписей();
	//НаборЗаписей_ТЧДополнительныеРеквизиты.Отбор.ГУИД.установить(id.Ref);
	//НаборЗаписей_ТЧДополнительныеРеквизиты.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	//счНомерСтроки = 0;

	//Для сч = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл

	//	стрк = деф.ТЧДополнительныеРеквизиты[сч];

	//	СтрокаТЧ = НаборЗаписей_ТЧДополнительныеРеквизиты.Добавить();
	//СтрокаТЧ.ГУИД = id.Ref;
	//СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = стрк.Значение.Ref;
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = стрк.Свойство.Ref;
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

	//	СтрокаТЧ._НомерСтроки = счНомерСтроки;

	//	счНомерСтроки = счНомерСтроки + 1;

	//КонецЦикла;

	//НаборЗаписей_ТЧДополнительныеРеквизиты.Записать();
	////------------------------------------------------------     ТЧ ШтрихкодыУпаковок



	//НаборЗаписей_ТЧШтрихкодыУпаковок = РегистрыСведений.РасходныйОрдерНаТовары_ТЧ_ШтрихкодыУпаковок__.СоздатьНаборЗаписей();
	//НаборЗаписей_ТЧШтрихкодыУпаковок.Отбор.ГУИД.установить(id.Ref);
	//НаборЗаписей_ТЧШтрихкодыУпаковок.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	//счНомерСтроки = 0;

	//Для сч = 0 По деф.ТЧШтрихкодыУпаковок.Количество()-1 Цикл

	//	стрк = деф.ТЧШтрихкодыУпаковок[сч];

	//	СтрокаТЧ = НаборЗаписей_ТЧШтрихкодыУпаковок.Добавить();
	//СтрокаТЧ.ГУИД = id.Ref;
	//СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
	//	гуид="";
	//	ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ШтрихкодУпаковки = стрк.ШтрихкодУпаковки.Ref;
	//	Иначе
	//		СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
	//	КонецЕсли;
	//	СтрокаТЧ._НомерСтроки = счНомерСтроки;

	//	счНомерСтроки = счНомерСтроки + 1;

	//КонецЦикла;

	//НаборЗаписей_ТЧШтрихкодыУпаковок.Записать();



	//------------------------------------------------------ ФИНАЛ
	
	ЗаказНаПеремещениеГУИД = ПолучитьГУИДЗаказаНаПеремещениеИзРаспоряжения(деф);
	
	РасходныйОрдерГУИД = id.Ref;
	
	РегистрыСведений.ксп_ИсточникДанныхДляПеремещенийТоваровИзЕРП
		.ДобавитьЗапись(ЗаказНаПеремещениеГУИД, 
							РасходныйОрдерГУИД,
							мВнешняяСистема);	

КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПолучитьГУИДЗаказаНаПеремещениеИзРаспоряжения(деф)

	ЗаказНаПеремещениеГУИД = "";
	Для сч = 0 По деф.ТЧТоварыПоРаспоряжениям.Количество()-1 Цикл
		стрк = деф.ТЧТоварыПоРаспоряжениям[сч];
		гуид="";
		ЕстьАтрибут = стрк.Распоряжение.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			ЗаказНаПеремещениеГУИД = стрк.Распоряжение.Ref;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ЗаказНаПеремещениеГУИД;
	
КонецФункции


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПроверитьКачествоДанных(ДокументОбъект)
	
	// проверить шапку
	
	Для каждого рек Из МассивРеквизитовШапкиДляПроверки() Цикл
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект[рек]) Тогда
			
			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.НетЗначения);
				
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект[рек]) 
			И НЕ ЗначениеЗаполнено(ДокументОбъект[рек].ВерсияДанных) Тогда

			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.БитаяСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// проверить все Табл Части
	
		
	Возврат Неопределено;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки()
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("МагазинОтправитель");
	//мРеквизиты.Добавить("МагазинПолучатель");
	//мРеквизиты.Добавить("Организация");
	//мРеквизиты.Добавить("ОрганизацияПолучатель");
	//мРеквизиты.Добавить("Ответственный");
	Возврат мРеквизиты;
	
КонецФункции


мВнешняяСистема = "erp";

