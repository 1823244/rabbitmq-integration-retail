Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ВозвратТоваровОтКлиента");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ВозвратТоваровОтКлиента");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ВозвратТоваровОтКлиента",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ВозвратТоваровОтКлиента",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// ///////////   ИМПОРТ  В ОБЪЕКТ ////////////


Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.возвраттоваровотклиента") Тогда
		Возврат Неопределено;
	КонецЕсли;
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	//------------------------------------- работа с GUID
	
	СуществующийОбъект = Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		СуществующийОбъект = Неопределено;
	Иначе 
		
		ОбъектДанных = Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
		СсылкаНового = Документы.ВозвратТоваровОтПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



//	ОбъектДанных.АдресЭП = деф.АдресЭП;

//	гуид="";
//	ЕстьАтрибут = деф.АналитикаХозяйственнойОперации.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.АналитикаХозяйственнойОперации = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.АналитикаХозяйственнойОперации.Ref ) );
//	Иначе
//		ОбъектДанных.АналитикаХозяйственнойОперации = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.АналитикаХозяйственнойОперации = ксп_ИмпортСлужебный.НайтиАналитикаХозяйственнойОперации(деф.АналитикаХозяйственнойОперации);

//	ОбъектДанных.БонусыНачислены = деф.БонусыНачислены;

//	гуид="";
//	ЕстьАтрибут = деф.ВладелецДисконтнойКарты.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ВладелецДисконтнойКарты = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ВладелецДисконтнойКарты.Ref ) );
//	Иначе
//		ОбъектДанных.ВладелецДисконтнойКарты = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ВладелецДисконтнойКарты = ксп_ИмпортСлужебный.НайтиВладелецДисконтнойКарты(деф.ВладелецДисконтнойКарты);

//	ОбъектДанных.ДатаРождения = деф.ДатаРождения;

//	ОбъектДанных.ДатаСчетаФактуры = деф.ДатаСчетаФактуры;

//	гуид="";
//	ЕстьАтрибут = деф.ДисконтнаяКарта.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ДисконтнаяКарта = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДисконтнаяКарта.Ref ) );
//	Иначе
//		ОбъектДанных.ДисконтнаяКарта = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ДисконтнаяКарта = ксп_ИмпортСлужебный.НайтиДисконтнаяКарта(деф.ДисконтнаяКарта);

	ОбъектДанных.ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговор(деф.Договор, мВнешняяСистема, деф.Контрагент, Неопределено);

//	гуид="";
//	ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.ДокументОснование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументОснование.Ref ) );
//	Иначе
//		ОбъектДанных.ДокументОснование = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);

//	ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = деф.ЕстьМаркируемаяПродукцияГИСМ;

//	гуид="";
//	ЕстьАтрибут = деф.КассаККМ.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.КассаККМ = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КассаККМ.Ref ) );
//	Иначе
//		ОбъектДанных.КассаККМ = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.КассаККМ = ксп_ИмпортСлужебный.НайтиКассаККМ(деф.КассаККМ);

	ОбъектДанных.Комментарий = деф.Комментарий;

	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема );

	ОбъектДанных.Магазин 			= РегистрыСведений.ксп_МэппингСкладМагазин.ПоМэппингу(деф.Склад, мВнешняяСистема);

//	ОбъектДанных.НомерСчетаФактуры = деф.НомерСчетаФактуры;

//	ОбъектДанных.НомерЧекаККМ = деф.НомерЧекаККМ;

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

//	гуид="";
//	ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
//	Иначе
//		ОбъектДанных.Ответственный = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Ответственный = Пользователи.ТекущийПользователь();

//	ОбъектДанных.ПоДокументу = деф.ПоДокументу;

//	ОбъектДанных.ПредъявленСчетФактура = деф.ПредъявленСчетФактура;

//	ОбъектДанных.ПробитЧек = деф.ПробитЧек;

//	гуид="";
//	ЕстьАтрибут = деф.Продавец.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.Продавец = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Продавец.Ref ) );
//	Иначе
//		ОбъектДанных.Продавец = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.Продавец = ксп_ИмпортСлужебный.НайтиПродавец(деф.Продавец);

//	_знч = "";
//	ЕстьЗначение = деф.СистемаНалогообложения.свойство("Значение",_знч);
//	Если ЕстьЗначение Тогда
//		ОбъектДанных.СистемаНалогообложения = деф.СистемаНалогообложения.Значение;
//	Иначе
//		ОбъектДанных.СистемаНалогообложения = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.СистемаНалогообложения = ксп_ИмпортСлужебный.НайтиПеречисление_СистемаНалогообложения(деф.СистемаНалогообложения);

	ОбъектДанных.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;

//	ОбъектДанных.Телефон = деф.Телефон;

//	ОбъектДанных.УдалитьАдресЧекаЕГАИС = деф.УдалитьАдресЧекаЕГАИС;

//	_знч = "";
//	ЕстьЗначение = деф.УдалитьВидНалога.свойство("Значение",_знч);
//	Если ЕстьЗначение Тогда
//		ОбъектДанных.УдалитьВидНалога = деф.УдалитьВидНалога.Значение;
//	Иначе
//		ОбъектДанных.УдалитьВидНалога = Неопределено;
//	КонецЕсли;
//	// на случай, если есть метод поиска ссылки:
//	ОбъектДанных.УдалитьВидНалога = ксп_ИмпортСлужебный.НайтиПеречисление_УдалитьВидНалога(деф.УдалитьВидНалога);

//	ОбъектДанных.УдалитьПодписьЧекаЕГАИС = деф.УдалитьПодписьЧекаЕГАИС;

//	ОбъектДанных.УчитыватьНДС = деф.УчитыватьНДС;


	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;

//	ОбъектДанных.ЧекДата = деф.ЧекДата;

//	ОбъектДанных.ЧекНомер = деф.ЧекНомер;




//	//------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();


	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.ДоговорКонтрагента.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ДоговорКонтрагента = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ДоговорКонтрагента.Ref ) );
//		Иначе
//			СтрокаТЧ.ДоговорКонтрагента = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговорКонтрагента(стрк.ДоговорКонтрагента);

		гуид="";
		ЕстьАтрибут = стрк.ДокументРеализации.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.ДокументПродажи = Документы.РеализацияТоваров.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ДокументРеализации.Ref ) );
		Иначе
			СтрокаТЧ.ДокументПродажи = Неопределено;
		КонецЕсли;

//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

		СтрокаТЧ.Количество = стрк.Количество;

		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

//		СтрокаТЧ.НеобходимостьВводаАкцизнойМарки = стрк.НеобходимостьВводаАкцизнойМарки;

		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);

//		гуид="";
//		ЕстьАтрибут = стрк.Продавец.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Продавец = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Продавец.Ref ) );
//		Иначе
//			СтрокаТЧ.Продавец = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Продавец = ксп_ИмпортСлужебный.НайтиПродавец(стрк.Продавец);

//		_знч = "";
//		ЕстьЗначение = стрк.СтавкаНДС.свойство("Значение",_знч);
//		Если ЕстьЗначение Тогда
//			СтрокаТЧ.СтавкаНДС = стрк.СтавкаНДС.Значение;
//		Иначе
//			СтрокаТЧ.СтавкаНДС = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
		СтрокаТЧ.СтавкаНДС	= ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоСправочникуЕРП(стрк.СтавкаНДС); 

//		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		СтрокаТЧ.Сумма = стрк.Сумма;

//		СтрокаТЧ.СуммаАвтоматическойСкидки = стрк.СуммаАвтоматическойСкидки;

		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

//		СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаРучнойСкидки;

//		СтрокаТЧ.СуммаСкидкиОплатыБонусом = стрк.СуммаСкидкиОплатыБонусом;

		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);

		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);

		СтрокаТЧ.Цена = стрк.Цена;

//		гуид="";
//		ЕстьАтрибут = стрк.ЧекККМ.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ЧекККМ = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЧекККМ.Ref ) );
//		Иначе
//			СтрокаТЧ.ЧекККМ = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ЧекККМ = ксп_ИмпортСлужебный.НайтиЧекККМ(стрк.ЧекККМ);

		СтрокаТЧ.Штрихкод = стрк.Штрихкод;

	КонецЦикла;

//	//------------------------------------------------------     ТЧ Серии



//	ОбъектДанных.Серии.Очистить();


//	Для счТовары = 0 По деф.ТЧСерии.Количество()-1 Цикл
//		стрк = деф.ТЧСерии[счТовары];
//		СтрокаТЧ = ОбъектДанных.Серии.Добавить();


//		СтрокаТЧ.Количество = стрк.Количество;

//		гуид="";
//		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
//		Иначе
//			СтрокаТЧ.Номенклатура = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

//		гуид="";
//		ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
//		Иначе
//			СтрокаТЧ.Серия = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

//		гуид="";
//		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
//		Иначе
//			СтрокаТЧ.Характеристика = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ БонусныеБаллыКНачислению



//	ОбъектДанных.БонусныеБаллыКНачислению.Очистить();


//	Для счТовары = 0 По деф.ТЧБонусныеБаллыКНачислению.Количество()-1 Цикл
//		стрк = деф.ТЧБонусныеБаллыКНачислению[счТовары];
//		СтрокаТЧ = ОбъектДанных.БонусныеБаллыКНачислению.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.БонуснаяПрограммаЛояльности.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.БонуснаяПрограммаЛояльности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.БонуснаяПрограммаЛояльности.Ref ) );
//		Иначе
//			СтрокаТЧ.БонуснаяПрограммаЛояльности = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.БонуснаяПрограммаЛояльности = ксп_ИмпортСлужебный.НайтиБонуснаяПрограммаЛояльности(стрк.БонуснаяПрограммаЛояльности);

//		СтрокаТЧ.ДатаНачисления = стрк.ДатаНачисления;

//		СтрокаТЧ.ДатаСписания = стрк.ДатаСписания;

//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.КоличествоБонусныхБаллов = стрк.КоличествоБонусныхБаллов;

//		гуид="";
//		ЕстьАтрибут = стрк.СкидкаНаценка.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.СкидкаНаценка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СкидкаНаценка.Ref ) );
//		Иначе
//			СтрокаТЧ.СкидкаНаценка = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.СкидкаНаценка = ксп_ИмпортСлужебный.НайтиСкидкаНаценка(стрк.СкидкаНаценка);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ АкцизныеМарки



//	ОбъектДанных.АкцизныеМарки.Очистить();


//	Для счТовары = 0 По деф.ТЧАкцизныеМарки.Количество()-1 Цикл
//		стрк = деф.ТЧАкцизныеМарки[счТовары];
//		СтрокаТЧ = ОбъектДанных.АкцизныеМарки.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.АкцизнаяМарка.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.АкцизнаяМарка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АкцизнаяМарка.Ref ) );
//		Иначе
//			СтрокаТЧ.АкцизнаяМарка = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.АкцизнаяМарка = ксп_ИмпортСлужебный.НайтиАкцизнаяМарка(стрк.АкцизнаяМарка);

//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.КодАкцизнойМарки = стрк.КодАкцизнойМарки;

//		гуид="";
//		ЕстьАтрибут = стрк.Справка2.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Справка2 = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Справка2.Ref ) );
//		Иначе
//			СтрокаТЧ.Справка2 = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.Справка2 = ксп_ИмпортСлужебный.НайтиСправка2(стрк.Справка2);

//		гуид="";
//		ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
//		Иначе
//			СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);

//	КонецЦикла;

//	//------------------------------------------------------     ТЧ ШтрихкодыУпаковок



//	ОбъектДанных.ШтрихкодыУпаковок.Очистить();


//	Для счТовары = 0 По деф.ТЧШтрихкодыУпаковок.Количество()-1 Цикл
//		стрк = деф.ТЧШтрихкодыУпаковок[счТовары];
//		СтрокаТЧ = ОбъектДанных.ШтрихкодыУпаковок.Добавить();


//		гуид="";
//		ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
//		Иначе
//			СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
//		КонецЕсли;
//		// на случай, если есть метод поиска ссылки:
//		СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);

//	КонецЦикла;




	//------------------------------------------------------ ФИНАЛ


	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();


	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	Если деф.isPosted Тогда 
		ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;

	// сохранить исходный json
	//РегистрыСведений.ксп_ИсходныеДанныеСообщений.ДобавитьЗапись(ОбъектДанных.Ссылка, jsonText);


	Возврат ОбъектДанных.Ссылка;
	
КонецФункции


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	//Если Свойство = "Сумма" Тогда
	//	Возврат XMLЗначение(Тип("Число"),Значение);
	//КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Значение;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПроверитьКачествоДанных(ДокументОбъект)
	
	// проверить шапку
	
	Для каждого рек Из МассивРеквизитовШапкиДляПроверки() Цикл
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект[рек]) Тогда
			
			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.НетЗначения);
				
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект[рек]) 
			И НЕ ЗначениеЗаполнено(ДокументОбъект[рек].ВерсияДанных) Тогда

			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.БитаяСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// проверить все Табл Части
	
		
	Возврат Неопределено;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки()
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("МагазинОтправитель");
	//мРеквизиты.Добавить("МагазинПолучатель");
	//мРеквизиты.Добавить("Организация");
	//мРеквизиты.Добавить("ОрганизацияПолучатель");
	//мРеквизиты.Добавить("Ответственный");
	Возврат мРеквизиты;
	
КонецФункции


мВнешняяСистема = "erp";

