Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_РеализацияТоваровУслуг",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	ЗагрузитьОбъект_ВДокумент(СтруктураОбъекта, jsonText);
	
	//ЗагрузитьОбъект_ВРегистр(СтруктураОбъекта, jsonText);

	//Возврат ОбъектДанных.Ссылка;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект_ВДокумент(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.реализациятоваровуслуг") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	СуществующийОбъект = Документы.РеализацияТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		
	Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = Документы.РеализацияТоваров.СоздатьДокумент();
		СсылкаНового = Документы.РеализацияТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	Иначе 
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
	КонецЕсли;
		
	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	ОбъектДанных.ДокументОснование	= Неопределено;
	ОбъектДанных.Комментарий 		= деф.Комментарий;	

	ОбъектДанных.Магазин = РегистрыСведений.ксп_МэппингСкладМагазин.ПоМэппингу(деф.Склад, мВнешняяСистема);

	//ОбъектДанных.Организация 		= ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Ответственный 		= Неопределено;                                                        
	
	ОбъектДанных.Склад 				= ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);
	
	
	ОбъектДанных.Товары.Очистить();

	Для счТовары = 0 По деф.ТЧОтгружаемыеТовары.Количество()-1 Цикл
		стрк = деф.ТЧОтгружаемыеТовары[счТовары];
		НовСтр = ОбъектДанных.Товары.Добавить();

		НовСтр.КлючСвязиСерийныхНомеров	= Неопределено;	

		НовСтр.Количество 			= стрк.Количество;
		НовСтр.КоличествоУпаковок 	= стрк.КоличествоУпаковок;
		НовСтр.Номенклатура 		= ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		НовСтр.Упаковка 			= ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);
		НовСтр.Характеристика 		= ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
                                                  
		НовСтр.СтатусУказанияСерий	= Неопределено;
		НовСтр.Сумма	= Неопределено;
		НовСтр.Цена	= Неопределено;
		
	КонецЦикла;
	
	// -------------------------------------------  ФИНАЛ

	ОбъектДанных.СуммаДокумента = 0;
	
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	
	ОбъектДанных.Записать();
	
	
	
	// добавить документ в РС для проведения
	
	ПроверитьКачествоДанных(ОбъектДанных);
	
	

	Возврат ОбъектДанных.Ссылка;
	
КонецФункции



// пример создания документа РеализацияТоваров
Функция ЗагрузитьОбъект_ВРегистр(СтруктураОбъекта, jsonText = "") Экспорт
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.реализациятоваров") Тогда
		Возврат Неопределено;
	КонецЕсли;
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	НаборЗаписей = РегистрыСведений.РеализацияТоваров.создатьНаборЗаписей();
	НаборЗаписей.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей.Отбор.ВнешняяСистема.установить(мВнешняяСистема);
	ОбъектДанных = НаборЗаписей.Добавить();


	ОбъектДанных.ГУИД = id.Ref;
	ОбъектДанных.ВнешняяСистема = мВнешняяСистема;


	//-------------------- ЗАПОЛНЕНИЕ РЕКВИЗИТОВ

	ОбъектДанных.НомерДокумента = id.Number;
	ОбъектДанных.ДатаДокумента = id.Date;
	ОбъектДанных.Проведен = деф.isPosted;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	ОбъектДанных.АдресДоставки = деф.АдресДоставки;
	гуид="";
	ЕстьАтрибут = деф.БанковскийСчетОрганизации.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.БанковскийСчетОрганизации = деф.БанковскийСчетОрганизации.Ref;
	Иначе
		ОбъектДанных.БанковскийСчетОрганизации = Неопределено;
	КонецЕсли;
	ОбъектДанных.БонусыНачислены = деф.БонусыНачислены;
	гуид="";
	ЕстьАтрибут = деф.ВладелецДисконтнойКарты.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ВладелецДисконтнойКарты = деф.ВладелецДисконтнойКарты.Ref;
	Иначе
		ОбъектДанных.ВладелецДисконтнойКарты = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.ДисконтнаяКарта.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ДисконтнаяКарта = деф.ДисконтнаяКарта.Ref;
	Иначе
		ОбъектДанных.ДисконтнаяКарта = Неопределено;
	КонецЕсли;
	ОбъектДанных.ДоверенностьВыдана = деф.ДоверенностьВыдана;
	ОбъектДанных.ДоверенностьДата = деф.ДоверенностьДата;
	ОбъектДанных.ДоверенностьНомер = деф.ДоверенностьНомер;
	ОбъектДанных.ДоверенностьЧерезКого = деф.ДоверенностьЧерезКого;
	гуид="";
	ЕстьАтрибут = деф.ДоговорКонтрагента.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ДоговорКонтрагента = деф.ДоговорКонтрагента.Ref;
	Иначе
		ОбъектДанных.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.ДокументРасчета.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ДокументРасчета = деф.ДокументРасчета.Ref;
	Иначе
		ОбъектДанных.ДокументРасчета = Неопределено;
	КонецЕсли;
	ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = деф.ЕстьМаркируемаяПродукцияГИСМ;
	гуид="";
	ЕстьАтрибут = деф.ЗаказПокупателя.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ЗаказПокупателя = деф.ЗаказПокупателя.Ref;
	Иначе
		ОбъектДанных.ЗаказПокупателя = Неопределено;
	КонецЕсли;
	ОбъектДанных.Комментарий = деф.Комментарий;
	гуид="";
	ЕстьАтрибут = деф.Контрагент.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Контрагент = деф.Контрагент.Ref;
	Иначе
		ОбъектДанных.Контрагент = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.Магазин.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Магазин = деф.Магазин.Ref;
	Иначе
		ОбъектДанных.Магазин = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.Организация.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Организация = деф.Организация.Ref;
	Иначе
		ОбъектДанных.Организация = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Ответственный = деф.Ответственный.Ref;
	Иначе
		ОбъектДанных.Ответственный = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.Продавец.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Продавец = деф.Продавец.Ref;
	Иначе
		ОбъектДанных.Продавец = Неопределено;
	КонецЕсли;
	_знч = "";
	ЕстьЗначение = деф.СистемаНалогообложения.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.СистемаНалогообложения = деф.СистемаНалогообложения.Значение;
	Иначе
		ОбъектДанных.СистемаНалогообложения = Неопределено;
	КонецЕсли;
	ОбъектДанных.СкидкиРассчитаны = деф.СкидкиРассчитаны;
	гуид="";
	ЕстьАтрибут = деф.Склад.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Склад = деф.Склад.Ref;
	Иначе
		ОбъектДанных.Склад = Неопределено;
	КонецЕсли;
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	ОбъектДанных.УдалитьАдресЧекаЕГАИС = деф.УдалитьАдресЧекаЕГАИС;
	ОбъектДанных.УдалитьАдресЭП = деф.УдалитьАдресЭП;
	гуид="";
	ЕстьАтрибут = деф.УдалитьБанковскийСчетОрганизации.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.УдалитьБанковскийСчетОрганизации = деф.УдалитьБанковскийСчетОрганизации.Ref;
	Иначе
		ОбъектДанных.УдалитьБанковскийСчетОрганизации = Неопределено;
	КонецЕсли;
	_знч = "";
	ЕстьЗначение = деф.УдалитьВидНалога.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.УдалитьВидНалога = деф.УдалитьВидНалога.Значение;
	Иначе
		ОбъектДанных.УдалитьВидНалога = Неопределено;
	КонецЕсли;
	гуид="";
	ЕстьАтрибут = деф.УдалитьКассаККМ.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.УдалитьКассаККМ = деф.УдалитьКассаККМ.Ref;
	Иначе
		ОбъектДанных.УдалитьКассаККМ = Неопределено;
	КонецЕсли;
	ОбъектДанных.УдалитьНомерЧекаККМ = деф.УдалитьНомерЧекаККМ;
	ОбъектДанных.УдалитьПодписьЧекаЕГАИС = деф.УдалитьПодписьЧекаЕГАИС;
	ОбъектДанных.УдалитьПробитЧек = деф.УдалитьПробитЧек;
	ОбъектДанных.УдалитьТелефон = деф.УдалитьТелефон;
	ОбъектДанных.УчитыватьНДС = деф.УчитыватьНДС;
	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;

	НаборЗаписей.Записать();


	//------------------------------------------------------     ТЧ Товары



	НаборЗаписей_ТЧТовары = РегистрыСведений.РеализацияТоваров_ТЧ_Товары__.СоздатьНаборЗаписей();
	НаборЗаписей_ТЧТовары.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей_ТЧТовары.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	счНомерСтроки = 0;

	Для сч = 0 По деф.ТЧТовары.Количество()-1 Цикл

		стрк = деф.ТЧТовары[сч];

		СтрокаТЧ = НаборЗаписей_ТЧТовары.Добавить();
	СтрокаТЧ.ГУИД = id.Ref;
	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
		гуид="";
		ЕстьАтрибут = стрк.ДоговорКонтрагента.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.ДоговорКонтрагента = стрк.ДоговорКонтрагента.Ref;
		Иначе
			СтрокаТЧ.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.ЗаказПокупателя.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.ЗаказПокупателя = стрк.ЗаказПокупателя.Ref;
		Иначе
			СтрокаТЧ.ЗаказПокупателя = Неопределено;
		КонецЕсли;
		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

		СтрокаТЧ.КлючСвязиСерийныхНомеров = стрк.КлючСвязиСерийныхНомеров;

		СтрокаТЧ.КлючСвязиУслугаАгента = стрк.КлючСвязиУслугаАгента;

		СтрокаТЧ.КодСтроки = стрк.КодСтроки;

		СтрокаТЧ.Количество = стрк.Количество;

		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

		СтрокаТЧ.НеобходимостьВводаАкцизнойМарки = стрк.НеобходимостьВводаАкцизнойМарки;

		гуид="";
		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Номенклатура = стрк.Номенклатура.Ref;
		Иначе
			СтрокаТЧ.Номенклатура = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Продавец.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Продавец = стрк.Продавец.Ref;
		Иначе
			СтрокаТЧ.Продавец = Неопределено;
		КонецЕсли;
		СтрокаТЧ.ПроцентАвтоматическойСкидки = стрк.ПроцентАвтоматическойСкидки;

		СтрокаТЧ.ПроцентРучнойСкидки = стрк.ПроцентРучнойСкидки;

		СтрокаТЧ.Резервировать = стрк.Резервировать;

		_знч = "";
		ЕстьЗначение = стрк.СтавкаНДС.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			СтрокаТЧ.СтавкаНДС = стрк.СтавкаНДС.Значение;
		Иначе
			СтрокаТЧ.СтавкаНДС = Неопределено;
		КонецЕсли;
		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаАвтоматическойСкидки = стрк.СуммаАвтоматическойСкидки;

		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

		СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаРучнойСкидки;

		гуид="";
		ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Упаковка = стрк.Упаковка.Ref;
		Иначе
			СтрокаТЧ.Упаковка = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Характеристика = стрк.Характеристика.Ref;
		Иначе
			СтрокаТЧ.Характеристика = Неопределено;
		КонецЕсли;
		СтрокаТЧ.Цена = стрк.Цена;

		СтрокаТЧ.Штрихкод = стрк.Штрихкод;

		СтрокаТЧ._НомерСтроки = счНомерСтроки;

		счНомерСтроки = счНомерСтроки + 1;

	КонецЦикла;

	НаборЗаписей_ТЧТовары.Записать();
	//------------------------------------------------------     ТЧ СкидкиНаценки



	НаборЗаписей_ТЧСкидкиНаценки = РегистрыСведений.РеализацияТоваров_ТЧ_СкидкиНаценки__.СоздатьНаборЗаписей();
	НаборЗаписей_ТЧСкидкиНаценки.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей_ТЧСкидкиНаценки.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	счНомерСтроки = 0;

	Для сч = 0 По деф.ТЧСкидкиНаценки.Количество()-1 Цикл

		стрк = деф.ТЧСкидкиНаценки[сч];

		СтрокаТЧ = НаборЗаписей_ТЧСкидкиНаценки.Добавить();
	СтрокаТЧ.ГУИД = id.Ref;
	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

		СтрокаТЧ.ОграниченаМинимальнойЦеной = стрк.ОграниченаМинимальнойЦеной;

		гуид="";
		ЕстьАтрибут = стрк.СкидкаНаценка.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.СкидкаНаценка = стрк.СкидкаНаценка.Ref;
		Иначе
			СтрокаТЧ.СкидкаНаценка = Неопределено;
		КонецЕсли;
		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ._НомерСтроки = счНомерСтроки;

		счНомерСтроки = счНомерСтроки + 1;

	КонецЦикла;

	НаборЗаписей_ТЧСкидкиНаценки.Записать();
	//------------------------------------------------------     ТЧ СерийныеНомера



	НаборЗаписей_ТЧСерийныеНомера = РегистрыСведений.РеализацияТоваров_ТЧ_СерийныеНомера__.СоздатьНаборЗаписей();
	НаборЗаписей_ТЧСерийныеНомера.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей_ТЧСерийныеНомера.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	счНомерСтроки = 0;

	Для сч = 0 По деф.ТЧСерийныеНомера.Количество()-1 Цикл

		стрк = деф.ТЧСерийныеНомера[сч];

		СтрокаТЧ = НаборЗаписей_ТЧСерийныеНомера.Добавить();
	СтрокаТЧ.ГУИД = id.Ref;
	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
		СтрокаТЧ.КлючСвязиСерийныхНомеров = стрк.КлючСвязиСерийныхНомеров;

		гуид="";
		ЕстьАтрибут = стрк.СерийныйНомер.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.СерийныйНомер = стрк.СерийныйНомер.Ref;
		Иначе
			СтрокаТЧ.СерийныйНомер = Неопределено;
		КонецЕсли;
		СтрокаТЧ._НомерСтроки = счНомерСтроки;

		счНомерСтроки = счНомерСтроки + 1;

	КонецЦикла;

	НаборЗаписей_ТЧСерийныеНомера.Записать();
	//------------------------------------------------------     ТЧ Серии



	НаборЗаписей_ТЧСерии = РегистрыСведений.РеализацияТоваров_ТЧ_Серии__.СоздатьНаборЗаписей();
	НаборЗаписей_ТЧСерии.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей_ТЧСерии.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	счНомерСтроки = 0;

	Для сч = 0 По деф.ТЧСерии.Количество()-1 Цикл

		стрк = деф.ТЧСерии[сч];

		СтрокаТЧ = НаборЗаписей_ТЧСерии.Добавить();
	СтрокаТЧ.ГУИД = id.Ref;
	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
		СтрокаТЧ.Количество = стрк.Количество;

		гуид="";
		ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Номенклатура = стрк.Номенклатура.Ref;
		Иначе
			СтрокаТЧ.Номенклатура = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Серия = стрк.Серия.Ref;
		Иначе
			СтрокаТЧ.Серия = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Характеристика = стрк.Характеристика.Ref;
		Иначе
			СтрокаТЧ.Характеристика = Неопределено;
		КонецЕсли;
		СтрокаТЧ._НомерСтроки = счНомерСтроки;

		счНомерСтроки = счНомерСтроки + 1;

	КонецЦикла;

	НаборЗаписей_ТЧСерии.Записать();
	//------------------------------------------------------     ТЧ БонусныеБаллыКНачислению



	НаборЗаписей_ТЧБонусныеБаллыКНачислению = РегистрыСведений.РеализацияТоваров_ТЧ_БонусныеБаллыКНачислению__.СоздатьНаборЗаписей();
	НаборЗаписей_ТЧБонусныеБаллыКНачислению.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей_ТЧБонусныеБаллыКНачислению.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	счНомерСтроки = 0;

	Для сч = 0 По деф.ТЧБонусныеБаллыКНачислению.Количество()-1 Цикл

		стрк = деф.ТЧБонусныеБаллыКНачислению[сч];

		СтрокаТЧ = НаборЗаписей_ТЧБонусныеБаллыКНачислению.Добавить();
	СтрокаТЧ.ГУИД = id.Ref;
	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
		гуид="";
		ЕстьАтрибут = стрк.БонуснаяПрограммаЛояльности.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.БонуснаяПрограммаЛояльности = стрк.БонуснаяПрограммаЛояльности.Ref;
		Иначе
			СтрокаТЧ.БонуснаяПрограммаЛояльности = Неопределено;
		КонецЕсли;
		СтрокаТЧ.ДатаНачисления = стрк.ДатаНачисления;

		СтрокаТЧ.ДатаСписания = стрк.ДатаСписания;

		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

		СтрокаТЧ.КоличествоБонусныхБаллов = стрк.КоличествоБонусныхБаллов;

		гуид="";
		ЕстьАтрибут = стрк.СкидкаНаценка.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.СкидкаНаценка = стрк.СкидкаНаценка.Ref;
		Иначе
			СтрокаТЧ.СкидкаНаценка = Неопределено;
		КонецЕсли;
		СтрокаТЧ._НомерСтроки = счНомерСтроки;

		счНомерСтроки = счНомерСтроки + 1;

	КонецЦикла;

	НаборЗаписей_ТЧБонусныеБаллыКНачислению.Записать();
	//------------------------------------------------------     ТЧ АкцизныеМарки



	НаборЗаписей_ТЧАкцизныеМарки = РегистрыСведений.РеализацияТоваров_ТЧ_АкцизныеМарки__.СоздатьНаборЗаписей();
	НаборЗаписей_ТЧАкцизныеМарки.Отбор.ГУИД.установить(id.Ref);
	НаборЗаписей_ТЧАкцизныеМарки.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


	счНомерСтроки = 0;

	Для сч = 0 По деф.ТЧАкцизныеМарки.Количество()-1 Цикл

		стрк = деф.ТЧАкцизныеМарки[сч];

		СтрокаТЧ = НаборЗаписей_ТЧАкцизныеМарки.Добавить();
	СтрокаТЧ.ГУИД = id.Ref;
	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
		гуид="";
		ЕстьАтрибут = стрк.АкцизнаяМарка.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.АкцизнаяМарка = стрк.АкцизнаяМарка.Ref;
		Иначе
			СтрокаТЧ.АкцизнаяМарка = Неопределено;
		КонецЕсли;
		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

		СтрокаТЧ.КодАкцизнойМарки = стрк.КодАкцизнойМарки;

		гуид="";
		ЕстьАтрибут = стрк.Справка2.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Справка2 = стрк.Справка2.Ref;
		Иначе
			СтрокаТЧ.Справка2 = Неопределено;
		КонецЕсли;
		гуид="";
		ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.ШтрихкодУпаковки = стрк.ШтрихкодУпаковки.Ref;
		Иначе
			СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
		КонецЕсли;
		СтрокаТЧ._НомерСтроки = счНомерСтроки;

		счНомерСтроки = счНомерСтроки + 1;

	КонецЦикла;

	НаборЗаписей_ТЧАкцизныеМарки.Записать();



	//------------------------------------------------------ ФИНАЛ


КонецФункции


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПроверитьКачествоДанных(ДокументОбъект)
	
	// проверить шапку
	
	Для каждого рек Из МассивРеквизитовШапкиДляПроверки() Цикл
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект[рек]) Тогда
			
			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.НетЗначения);
				
		ИначеЕсли ЗначениеЗаполнено(ДокументОбъект[рек]) 
			И НЕ ЗначениеЗаполнено(ДокументОбъект[рек].ВерсияДанных) Тогда

			ксп_ИмпортСлужебный.ДобавитьПроблемуОтложенногоПроведения(
				ДокументОбъект.Ссылка, рек, Неопределено, 0, 
				Перечисления.ксп_ВидыПроблемКачестваДокументов.БитаяСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// проверить все Табл Части
	
		
	Возврат Неопределено;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки()
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("МагазинОтправитель");
	//мРеквизиты.Добавить("МагазинПолучатель");
	//мРеквизиты.Добавить("Организация");
	//мРеквизиты.Добавить("ОрганизацияПолучатель");
	//мРеквизиты.Добавить("Ответственный");
	Возврат мРеквизиты;
	
КонецФункции


мВнешняяСистема = "erp";

