#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_Склады");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_Склады");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_Склады",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_Склады",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = "справочник.склады" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	id = СтруктураОбъекта.identification;
	def = СтруктураОбъекта.definition;                                                    

	//------------------------------------- работа с мэппингом
	
	СкладПоМэппингу = Неопределено;
	Если РегистрыСведений.ксп_МэппингСправочникСклады.ЕстьГУИД(id.Ref) Тогда
		СкладПоМэппингу = РегистрыСведений.ксп_МэппингСправочникСклады.ПоМэппингу(id.Ref);
	Иначе 
		РегистрыСведений.ксп_МэппингСправочникСклады.ДобавитьГУИД(id.Ref, def.Description+", Код: "+id.code);
		// здесь идеально было бы отправить алерт, чтобы пользователь проставил мэппинг
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СкладПоМэппингу) Тогда
		Возврат СкладПоМэппингу;
	КонецЕсли;
	
	//------------------------------------- работа с GUID
	
	//СуществующийОбъект = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	//Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
	//	ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
	//	СуществующийОбъект = Неопределено;
	//Иначе 
	//	ОбъектДанных = Справочники.Склады.СоздатьЭлемент();
	//	СсылкаНового = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	//	ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	//КонецЕсли;
	//
	////------------------------------------- Заполнение реквизитов
	//ОбъектДанных.Код = id.code;
	//
	//ОбъектДанных.Наименование = def.description;
	//ParentRef = "";
	//Если id.parent.Свойство("Ref", ParentRef) Тогда
	//	ОбъектДанных.Родитель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(ParentRef));
	//КонецЕсли;
	//
	//ОбъектДанных.ПометкаУдаления = def.DeletionMark;
	//
	//ОбъектДанных.ТипСклада = РегистрыСведений.ксп_МэппингТипыСкладов.ПоМэппингу(def.ТипСклада.Значение);
	//
	//// установка рекизита через хардкод - отключено. для складов решили использовать мэппинг
	////
	////Если НРег(def.ТипСклада.Значение) = Нрег( "РозничныйМагазин" ) Тогда
	////	ОбъектДанных.ТипСклада = Перечисления.ТипыСкладов.ТорговыйЗал;
	//////ИначеЕсли def.ТипСклада.Значение = Нрег( "ОптовыйСклад" ) Тогда
	////Иначе
	////	ОбъектДанных.ТипСклада = Перечисления.ТипыСкладов.СкладскоеПомещение;
	////КонецЕсли;

	//// реквизиты Розницы, которых нет в ЕРП
	////ОбъектДанных.Организация = "";
	////ОбъектДанных.Магазин = "";
	//
	//ОбъектДанных.ОбменДанными.Загрузка = Истина;
	//
	//ОбъектДанных.Записать();
	//

	//// сохранить исходный json
	//РегистрыСведений.ксп_ИсходныеДанныеСообщений.ДобавитьЗапись(ОбъектДанных.Ссылка, jsonText);
	//
	//Возврат ОбъектДанных.Ссылка;
	
КонецФункции


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта, json);
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции


#КонецОбласти 	