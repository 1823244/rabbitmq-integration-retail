#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Документ_ЧекКоррекции");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Документ_ЧекКоррекции");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Документ_ЧекКоррекции",
		"Форма_Плагин_RabbitMQ_экспорт_Документ_ЧекКоррекции",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	

Функция ВыгрузитьОбъект(ДанныеСсылка) Экспорт
	Если ТипЗнч(ДанныеСсылка) = Тип("ДокументСсылка.ЧекКоррекции") Тогда
		Обк = ДанныеСсылка.ПолучитьОбъект(); 
	Иначе 
		Обк = ДанныеСсылка; 
	КонецЕсли;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "retail");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	//	DEFINITION          
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	definition.Вставить("АдресМагазина", Обк.АдресМагазина);
	definition.Вставить("АдресРасчетов", Обк.АдресРасчетов);
	definition.Вставить("ВидОперации", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВидОперации));
	definition.Вставить("ВыручкаНаличными", Обк.ВыручкаНаличными);
	definition.Вставить("ДатаКоррекции", Обк.ДатаКоррекции);
	definition.Вставить("ДисконтнаяКарта", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ДисконтнаяКарта));
	definition.Вставить("ДокументОснование", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ДокументОснование));
	definition.Вставить("ДокументРасчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ДокументРасчетов));
	definition.Вставить("ДополнительныйРеквизит", Обк.ДополнительныйРеквизит);
	definition.Вставить("ЗаказПокупателя", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЗаказПокупателя));
	definition.Вставить("КассаККМ", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КассаККМ));
	definition.Вставить("Кассир", Обк.Кассир);
	definition.Вставить("КассирИНН", Обк.КассирИНН);
	definition.Вставить("Комментарий", Обк.Комментарий);
	definition.Вставить("Магазин", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Магазин));
	definition.Вставить("МестоРасчетов", Обк.МестоРасчетов);
	definition.Вставить("НеприменениеККТ", Обк.НеприменениеККТ);
	definition.Вставить("НомерПредписания", Обк.НомерПредписания);
	definition.Вставить("НомерСмены", Обк.НомерСмены);
	definition.Вставить("НомерЧека", Обк.НомерЧека);
	definition.Вставить("ОперацияСДенежнымиСредствами", Обк.ОперацияСДенежнымиСредствами);
	definition.Вставить("ОписаниеКоррекции", Обк.ОписаниеКоррекции);
	definition.Вставить("Организация", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Организация));
	definition.Вставить("Ответственный", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ответственный));
	definition.Вставить("Покупатель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Покупатель));
	definition.Вставить("ПокупательEmail", Обк.ПокупательEmail);
	definition.Вставить("ПокупательИНН", Обк.ПокупательИНН);
	definition.Вставить("ПокупательНомер", Обк.ПокупательНомер);
	definition.Вставить("ПризнакАгента", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПризнакАгента));
	definition.Вставить("ПробитЧек", Обк.ПробитЧек);
	definition.Вставить("РабочееМесто", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.РабочееМесто));
	definition.Вставить("СистемаНалогообложения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СистемаНалогообложения));
	definition.Вставить("ТипКоррекции", Обк.ТипКоррекции);
	definition.Вставить("ТипРасчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ТипРасчета));
	definition.Вставить("ЭтоСторно", Обк.ЭтоСторно);

	//------------------------------------------------------     ТЧ ПозицииЧека

	ТЧПозицииЧека = Новый Массив;

	Для сч = 0 По обк.ПозицииЧека.Количество()-1 Цикл

		стрк = обк.ПозицииЧека[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("ГлобальныйИдентификаторТорговойЕдиницы", стрк.ГлобальныйИдентификаторТорговойЕдиницы);
		НовСтр.Вставить("ДанныеПоставщикаИНН", стрк.ДанныеПоставщикаИНН);
		НовСтр.Вставить("ДанныеПоставщикаНаименование", стрк.ДанныеПоставщикаНаименование);
		НовСтр.Вставить("ДанныеПоставщикаТелефон", стрк.ДанныеПоставщикаТелефон);
		НовСтр.Вставить("ЕдиницаИзмерения", стрк.ЕдиницаИзмерения);
		НовСтр.Вставить("ИзмененияСостояния", стрк.ИзмененияСостояния);
		НовСтр.Вставить("КодКонтрольнойМарки", стрк.КодКонтрольнойМарки);
		НовСтр.Вставить("КодСтраныПроисхожденияТовара", стрк.КодСтраныПроисхожденияТовара);
		НовСтр.Вставить("КодТоварнойНоменклатуры", стрк.КодТоварнойНоменклатуры);
		НовСтр.Вставить("Количество", стрк.Количество);
		НовСтр.Вставить("КонтрольныйИдентификационныйЗнак", стрк.КонтрольныйИдентификационныйЗнак);
		НовСтр.Вставить("НаименованиеПредметаРасчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.НаименованиеПредметаРасчета));
		НовСтр.Вставить("НомерТаможеннойДекларации", стрк.НомерТаможеннойДекларации);
		НовСтр.Вставить("ОператорПереводаАдрес", стрк.ОператорПереводаАдрес);
		НовСтр.Вставить("ОператорПереводаИНН", стрк.ОператорПереводаИНН);
		НовСтр.Вставить("ОператорПереводаНаименование", стрк.ОператорПереводаНаименование);
		НовСтр.Вставить("ОператорПереводаТелефон", стрк.ОператорПереводаТелефон);
		НовСтр.Вставить("ОператорПоПриемуПлатежейТелефон", стрк.ОператорПоПриемуПлатежейТелефон);
		НовСтр.Вставить("ПлатежныйАгентОперация", стрк.ПлатежныйАгентОперация);
		НовСтр.Вставить("ПлатежныйАгентТелефон", стрк.ПлатежныйАгентТелефон);
		НовСтр.Вставить("ПризнакАгентаПоПредметуРасчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ПризнакАгентаПоПредметуРасчета));
		НовСтр.Вставить("ПризнакПредметаРасчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ПризнакПредметаРасчета));
		НовСтр.Вставить("ПризнакСпособаРасчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ПризнакСпособаРасчета));
		НовСтр.Вставить("СерийныйНомер", стрк.СерийныйНомер);
		НовСтр.Вставить("Склад", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Склад));
		НовСтр.Вставить("СтавкаНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.СтавкаНДС));
		НовСтр.Вставить("СуммаАкциза", стрк.СуммаАкциза);
		НовСтр.Вставить("СуммаНДС", стрк.СуммаНДС);
		НовСтр.Вставить("СуммаСкидок", стрк.СуммаСкидок);
		НовСтр.Вставить("СуммаСоСкидками", стрк.СуммаСоСкидками);
		НовСтр.Вставить("ТипМаркировки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ТипМаркировки));
		НовСтр.Вставить("Упаковка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Упаковка));
		НовСтр.Вставить("Характеристика", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Характеристика));
		НовСтр.Вставить("ЦенаСоСкидками", стрк.ЦенаСоСкидками);
		НовСтр.Вставить("Штрихкод", стрк.Штрихкод);
		НовСтр.Вставить("ШтрихкодBase64", стрк.ШтрихкодBase64);
		ТЧПозицииЧека.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧПозицииЧека", ТЧПозицииЧека);

	//------------------------------------------------------     ТЧ Оплата

	ТЧОплата = Новый Массив;

	Для сч = 0 По обк.Оплата.Количество()-1 Цикл

		стрк = обк.Оплата[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("ВидОплаты", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВидОплаты));
		НовСтр.Вставить("Сумма", стрк.Сумма);
		НовСтр.Вставить("ТипОплаты", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ТипОплаты));
		НовСтр.Вставить("ЭквайринговыйТерминал", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ЭквайринговыйТерминал));
		ТЧОплата.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧОплата", ТЧОплата);




	//------------------------------------------------------ ФИНАЛ


	СтруктураОбъекта.Вставить("definition", definition);
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	Возврат json;
КонецФункции









