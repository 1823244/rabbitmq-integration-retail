#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказКлиента");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказКлиента");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказКлиента",
		"Форма_Плагин_RabbitMQ_импорт_из_ЕРП_Документ_ЗаказКлиента",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//	jsonText 			- строка - оригинальное сообщение из брокера
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = "документ.заказклиента" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	id = СтруктураОбъекта.identification;
	def = СтруктураОбъекта.definition;
	
	СуществующийОбъект = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		
	Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = Документы.ЗаказПокупателя.СоздатьДокумент();
		СсылкаНового = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	Иначе 
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		// а вот здесь вопрос - надо обновлять документ или нет?
	КонецЕсли;
		
	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	
	ОбъектДанных.ПометкаУдаления = def.DeletionMark;
	
	СкладГУИД = "";
	Если def.Склад.Свойство("Ref", СкладГУИД) Тогда
		//ОбъектДанных.Склад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СкладГУИД));
		ОбъектДанных.Склад = РегистрыСведений.ксп_МэппингСправочникСклады.ПоМэппингу(СкладГУИД);
	КонецЕсли; 
	
	
	
	ОрганизацияГУИД = "";
	Если def.Организация.Свойство("Ref", ОрганизацияГУИД) Тогда
		ОбъектДанных.Организация = РегистрыСведений.ксп_МэппингСправочникОрганизации.ПоМэппингу(ОрганизацияГУИД);
	КонецЕсли;
	

	ОбъектДанных.Товары.Очистить();

	Для счТовары = 0 По def.ТЧТовары.Количество()-1 Цикл
		стрк = def.ТЧТовары[счТовары];
		НовСтр = ОбъектДанных.Товары.Добавить();
			
		НоменклатураГУИД = "";
		Если стрк.Номенклатура.Свойство("Ref", НоменклатураГУИД) Тогда
			НовСтр.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураГУИД));
		КонецЕсли;
		
		НовСтр.Количество = стрк.Количество;
		НовСтр.КоличествоУпаковок = стрк.КоличествоУпаковок;
		НовСтр.Цена = стрк.Цена;
		НовСтр.Сумма = стрк.СуммаСНДС;
		НовСтр.СтавкаНДС = стрк.СтавкаНДС;    //todo Доделать

	//	//КлючСвязи	Число	
	//	НовСтр.КлючСвязи = счТовары;
	//	//КлючСвязиСерийныхНомеров	Число	
	//	НовСтр.КлючСвязиСерийныхНомеров = счТовары;
	//	//Количество	Число	                   
	//	//НеобходимостьВводаАкцизнойМарки	Булево	
	//	//Номенклатура	Справочник	Номенклатура
	//	//НомерГТД	Справочник	НомераГТД
	//	//Справка2	Справочник	Справки2ЕГАИС
	//	//СтатусУказанияСерий	Число	
	//	НовСтр.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
	//	//СтатусУказанияСерийОтправитель	Число	
	//	НовСтр.СтатусУказанияСерийОтправитель = стрк.СтатусУказанияСерийОтправитель;
	//	//СтатусУказанияСерийПолучатель	Число	
	//	НовСтр.СтатусУказанияСерийПолучатель = стрк.СтатусУказанияСерийПолучатель;
	//	//Сумма	Число	
	//	//УдалитьСправка1	Справочник	Справки1ЕГАИС
	//	//Упаковка	Справочник	УпаковкиНоменклатуры
	//	//Упаковка = "";
	//	//Если стрк.Упаковка.Свойство("ref", Упаковка) Тогда
	//	//	НовСтр.Упаковка = Справочники.УпаковкиНоменклатуры.ПолучитьСсылку(
	//	//		Новый УникальныйИдентификатор(Упаковка));
	//	//КонецЕсли;
	//	НовСтр.Упаковка = ксп_ИмпортСлужебный
	//		.ПолучитьСсылкуСправочникаСПроверкой(стрк.Упаковка, "УпаковкиНоменклатуры");
	//	//Характеристика	Справочник	ХарактеристикиНоменклатуры
	//	//Характеристика = "";
	//	//Если стрк.Характеристика.Свойство("ref", Характеристика) Тогда
	//	//	НовСтр.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(
	//	//		Новый УникальныйИдентификатор(Характеристика));
	//	//КонецЕсли;
	//	НовСтр.Характеристика = ксп_ИмпортСлужебный.ПолучитьСсылкуСправочникаСПроверкой(стрк.Характеристика, "УпаковкиНоменклатуры");
	//	//Цена	Число	
	//	//Штрихкод	Строка	
	КонецЦикла;
	
	
	
	//ОбъектДанных.Серии.Очистить();

	//Для счТовары = 0 По def.ТЧСерии.Количество()-1 Цикл
	//	
	//	стрк = def.ТЧСерии[счТовары];
	//	НовСтр = ОбъектДанных.Серии.Добавить();
	//	НовСтр.Количество = стрк.Количество;
	//	НовСтр.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(
	//		Новый УникальныйИдентификатор(стрк.Номенклатура.ref));
	//	НовСтр.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(
	//		Новый УникальныйИдентификатор(стрк.Характеристика.ref));
	//	НовСтр.Серия = Справочники.СерииНоменклатуры.ПолучитьСсылку(
	//		Новый УникальныйИдентификатор(стрк.Серия.ref));
	//	
	//КонецЦикла;


	
	
	ОбъектДанных.Статус = перечисления.СтатусыЗаказовПокупателей.НеСогласован;
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	
	ОбъектДанных.Записать();

	
	// сохранить исходное сообщение
	
	РегистрыСведений.ксп_ИсходныеДанныеСообщений.ДобавитьЗапись(ОбъектДанных.Ссылка, jsonText);
	
	
	// добавить документ в РС для проведения
	
	ксп_ИмпортСлужебный.ПроверитьКачествоДанных(ОбъектДанных, ЭтотОбъект);
	
	

	Возврат ОбъектДанных.Ссылка;
	
КонецФункции




#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Склад");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

