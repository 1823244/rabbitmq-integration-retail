#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Документ_ОтчетОРозничныхПродажах");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Документ_ОтчетОРозничныхПродажах");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Документ_ОтчетОРозничныхПродажах",
		"Форма_Плагин_RabbitMQ_экспорт_Документ_ОтчетОРозничныхПродажах",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	СсылочныйТип	- ДокументСсылка. / ДокументОбъект. - при чтении узла обмена сюда будут приходить именно объекты
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВыгрузитьОбъект(СсылочныйТип) Экспорт
	
	
	Если ТипЗнч(СсылочныйТип) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		Обк = СсылочныйТип.ПолучитьОбъект(); 
	Иначе 
		Обк = СсылочныйТип; 
	КонецЕсли;
	
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	
	СтруктураОбъекта.Вставить("source", "Retail");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	
	#Область Организация
	Организация = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Организация);
	definition.Вставить("Организация", Организация);
	#КонецОбласти 
	
////Реквизит	Тип	Вид
//ЕстьМаркируемаяПродукцияГИСМ	Булево	
//КассаККМ	Справочник	КассыККМ
//КассоваяСмена	Документ	КассоваяСмена
//Комментарий	Строка	
//Магазин	Справочник	Магазины
//ОплатаПодарочнымиСертификатами	Число	

//Ответственный	Справочник	Пользователи
//СуммаВозвратов	Число	
//СуммаДокумента	Число	
//СуммаОплатыНаличных	Число	
//УдалитьДоговорЭквайринга	Справочник	УдалитьДоговорыЭквайринга
//УчитыватьНДС	Булево	
//ЦенаВключаетНДС	Булево	
//Эквайрер	Справочник	Контрагенты	
	
	#Область ТЧ_Товары
	ТЧ_Товары = Новый Структура;
	Для счСтрок = 0 По Обк.Товары.Количество()-1 Цикл
		
		стрк = Обк.Товары[счСтрок];
		
		Строка_Товары = Новый Структура;
		Строка_Товары.Вставить("Номенклатура",ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Номенклатура));
		Строка_Товары.Вставить("Количество",стрк.Количество);
		Строка_Товары.Вставить("Цена",стрк.Цена);
		Строка_Товары.Вставить("Сумма",стрк.Сумма);
		
		ТЧ_Товары.Вставить("Строка"+Формат(счСтрок, "ЧГ=;ЧРГ=;ЧН="), Строка_Товары);
	КонецЦикла;  
	
	definition.Вставить("ТЧ_Товары", ТЧ_Товары);	
	
	#КонецОбласти
	
	definition.Вставить("СуммаДокумента", Обк.СуммаДокумента); 	
	
	//------------------------------------------------------
	
	СтруктураОбъекта.Вставить("definition", definition);
	
	
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	
	Возврат json;
	
	
	Возврат Неопределено;
	
КонецФункции
